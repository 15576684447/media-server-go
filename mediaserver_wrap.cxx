/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: mediaserver.i

#define SWIGMODULE mediaserver
#define SWIG_DIRECTORS

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Go proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#include <exception>
#include <map>

namespace Swig {

  class DirectorException : public std::exception {
  };
}

/* Handle memory management for directors.  */

namespace {
  struct GCItem {
    virtual ~GCItem() {}
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem* operator->() {
      return _item;
    }

    private:
      GCItem *_item;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };
}

class Swig_memory {
public:
  template <typename Type>
  void swig_acquire_pointer(Type* vptr) {
    if (vptr) {
      swig_owner[vptr] = new GCItem_T<Type>(vptr);
    }
  }
private:
  typedef std::map<void *, GCItem_var> swig_ownership_map;
  swig_ownership_map swig_owner;
};

template <typename Type>
static void swig_acquire_pointer(Swig_memory** pmem, Type* ptr) {
  if (!pmem) {
    *pmem = new Swig_memory;
  }
  (*pmem)->swig_acquire_pointer(ptr);
}

static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}



#include <string>
#include <list>
#include <functional>
#include "mediaserver/include/config.h"	
#include "mediaserver/include/dtls.h"
#include "mediaserver/include/OpenSSL.h"
#include "mediaserver/include/media.h"
#include "mediaserver/include/rtp.h"
#include "mediaserver/include/rtpsession.h"
#include "mediaserver/include/DTLSICETransport.h"	
#include "mediaserver/include/RTPBundleTransport.h"
#include "mediaserver/include/PCAPTransportEmulator.h"	
#include "mediaserver/include/mp4recorder.h"
#include "mediaserver/include/mp4streamer.h"
#include "mediaserver/src/vp9/VP9LayerSelector.h"
#include "mediaserver/include/rtp/RTPStreamTransponder.h"
#include "mediaserver/include/ActiveSpeakerDetector.h"


class StringFacade : private std::string
{
public:
	StringFacade(const char* str) 
	{
		std::string::assign(str);
	}
	StringFacade(std::string &str) : std::string(str)
	{
		
	}
	const char* toString() 
	{
		return std::string::c_str();
	}
};


class PropertiesFacade : private Properties
{
public:
	void SetProperty(const char* key,int intval)
	{
		Properties::SetProperty(key,intval);
	}

	void SetProperty(const char* key,const char* val)
	{
		Properties::SetProperty(key,val);
	}
};



class MediaServer
{

public:

	static void Initialize()
	{
		//Initialize ssl
		OpenSSL::ClassInit();
		
		//Start DTLS
		DTLSConnection::Initialize();
	}
	
	static void EnableLog(bool flag)
	{
		//Enable log
		Log("-EnableLog [%d]\n",flag);
		Logger::EnableLog(flag);
		Log("-EnableLog [%d]\n",flag);
	}
	
	static void EnableDebug(bool flag)
	{
		//Enable debug
		Log("-EnableDebug [%d]\n",flag);
		Logger::EnableDebug(flag);
	}
	
	static void EnableUltraDebug(bool flag)
	{
		//Enable debug
		Log("-EnableUltraDebug [%d]\n",flag);
		Logger::EnableUltraDebug(flag);
	}
	
	static bool SetPortRange(int minPort, int maxPort)
	{
		return RTPTransport::SetPortRange(minPort,maxPort);
	}
	
	static StringFacade GetFingerprint()
	{
		return StringFacade(DTLSConnection::GetCertificateFingerPrint(DTLSConnection::Hash::SHA256).c_str());
	}
};


class RTPSessionFacade : 	
	public RTPSender,
	public RTPReceiver,
	public RTPSession
{
public:
	RTPSessionFacade(MediaFrame::Type media) : RTPSession(media,NULL)
	{
		//Delegate to group
		delegate = true;
		//Start group dispatch
		GetIncomingSourceGroup()->Start();
	}
	virtual ~RTPSessionFacade() = default;
	virtual int Enqueue(const RTPPacket::shared& packet)	 { return SendPacket(*packet); }
	virtual int SendPLI(DWORD ssrc)				 { return RequestFPU();}
	
	int Init(const Properties &properties)
	{
		RTPMap rtp;
		RTPMap apt;
		
		//Get codecs
		std::vector<Properties> codecs;
		properties.GetChildrenArray("codecs",codecs);

		//For each codec
		for (auto it = codecs.begin(); it!=codecs.end(); ++it)
		{
			
			BYTE codec;
			//Depending on the type
			switch (GetMediaType())
			{
				case MediaFrame::Audio:
					codec = (BYTE)AudioCodec::GetCodecForName(it->GetProperty("codec"));
					break;
				case MediaFrame::Video:
					codec = (BYTE)VideoCodec::GetCodecForName(it->GetProperty("codec"));
					break;
				case MediaFrame::Text:
					codec = (BYTE)-1;
					break;
				default:
					///Ignore
					codec = (BYTE)-1;
					break;
			}

			//Get codec type
			BYTE type = it->GetProperty("pt",0);
			//ADD it
			rtp[type] = codec;
		}
	
		//Set local 
		RTPSession::SetSendingRTPMap(rtp,apt);
		RTPSession::SetReceivingRTPMap(rtp,apt);
		
		//Call parent
		return RTPSession::Init();
	}
};


class PlayerEndListener {
public:
	PlayerEndListener()
	{

	}
	virtual ~PlayerEndListener() {

	}
	virtual void onEnd() {

	}
};


class REMBBitrateListener {
public:
	REMBBitrateListener()
	{

	}
	virtual ~REMBBitrateListener() {

	}
	virtual void onREMB() {

	}
};



class PlayerFacade :
	public MP4Streamer,
	public MP4Streamer::Listener
{
public:
	PlayerFacade():
		MP4Streamer(this),
		audio(MediaFrame::Audio),
		video(MediaFrame::Video)
	{
		Reset();
		//Start dispatching
		audio.Start();
		video.Start();
	}

	void setPlayEndListener(PlayerEndListener *listener) 
	{
		endlistener = listener;
	}

	virtual void onRTPPacket(RTPPacket &packet)
	{
		switch(packet.GetMedia())
		{
			case MediaFrame::Video:
				//Update stats
				video.media.Update(getTimeMS(),packet.GetSeqNum(),packet.GetRTPHeader().GetSize()+packet.GetMediaLength());
				//Set ssrc of video
				packet.SetSSRC(video.media.ssrc);
				//Multiplex
				video.AddPacket(packet.Clone());
				break;
			case MediaFrame::Audio:
				//Update stats
				audio.media.Update(getTimeMS(),packet.GetSeqNum(),packet.GetRTPHeader().GetSize()+packet.GetMediaLength());
				//Set ssrc of audio
				packet.SetSSRC(audio.media.ssrc);
				//Multiplex
				audio.AddPacket(packet.Clone());
				break;
			default:
				///Ignore
				return;
		}
	}

	virtual void onTextFrame(TextFrame &frame) {}
	virtual void onEnd() 
	{

        // todo make callback 
	}
	
	void Reset() 
	{
		audio.media.Reset();
		video.media.Reset();
		audio.media.ssrc = rand();
		video.media.ssrc = rand();
	}
	
	virtual void onMediaFrame(MediaFrame &frame)  {}
	virtual void onMediaFrame(DWORD ssrc, MediaFrame &frame) {}

	RTPIncomingSourceGroup* GetAudioSource() { return &audio; }
	RTPIncomingSourceGroup* GetVideoSource() { return &video; }
	
private:
	//TODO: Update to multitrack
	PlayerEndListener *endlistener;
	RTPIncomingSourceGroup audio;
	RTPIncomingSourceGroup video;
};



class RTPSenderFacade
{
public:	
	RTPSenderFacade(DTLSICETransport* transport)
	{
		sender = transport;
	}

	RTPSenderFacade(RTPSessionFacade* session)
	{
		sender = session;
	}
	
	RTPSender* get() { return sender;}
private:
	RTPSender* sender;
};

class RTPReceiverFacade
{
public:	
	RTPReceiverFacade(DTLSICETransport* transport)
	{
		receiver = transport;
	}

	RTPReceiverFacade(RTPSessionFacade* session)
	{
		receiver = session;
	}
	
	RTPReceiverFacade(PCAPTransportEmulator *transport)
	{
		receiver = transport;
	}
	
	int SendPLI(DWORD ssrc)
	{
		return receiver ? receiver->SendPLI(ssrc) : 0;
	}
	
	RTPReceiver* get() { return receiver;}
private:
	RTPReceiver* receiver;
};


RTPSenderFacade* TransportToSender(DTLSICETransport* transport)
{
	return new RTPSenderFacade(transport);
}
RTPReceiverFacade* TransportToReceiver(DTLSICETransport* transport)
{
	return new RTPReceiverFacade(transport);
}

RTPReceiverFacade* PCAPTransportEmulatorToReceiver(PCAPTransportEmulator* transport)
{
	return new RTPReceiverFacade(transport);
}

RTPSenderFacade* SessionToSender(RTPSessionFacade* session)
{
	return new RTPSenderFacade(session);	
}
RTPReceiverFacade* SessionToReceiver(RTPSessionFacade* session)
{
	return new RTPReceiverFacade(session);
}



class RTPStreamTransponderFacade : 
	public RTPStreamTransponder
{
public:
	RTPStreamTransponderFacade(RTPOutgoingSourceGroup* outgoing,RTPSenderFacade* sender, REMBBitrateListener* listener) :
		RTPStreamTransponder(outgoing, sender ? sender->get() : NULL),
		listener(listener)
	{}

	bool SetIncoming(RTPIncomingSourceGroup* incoming, RTPReceiverFacade* receiver)
	{
		return RTPStreamTransponder::SetIncoming(incoming, receiver ? receiver->get() : NULL);
	}
	
	virtual void onREMB(RTPOutgoingSourceGroup* group,DWORD ssrc, DWORD bitrate) override
	{
        // todo  make callback
		Log("onREMB\n");
	}
	void SetMinPeriod(DWORD period) { this->period = period; }

private:
	DWORD period = 1000;
	QWORD last = 0; 
	REMBBitrateListener* listener;
};

class StreamTrackDepacketizer :
	public RTPIncomingSourceGroup::Listener
{
public:
	StreamTrackDepacketizer(RTPIncomingSourceGroup* incomingSource)
	{
		//Store
		this->incomingSource = incomingSource;
		//Add us as RTP listeners
		this->incomingSource->AddListener(this);
		//No depkacketixer yet
		depacketizer = NULL;
	}

	virtual ~StreamTrackDepacketizer()
	{
		//JIC
		Stop();
		//Check 
		if (depacketizer)
			//Delete depacketier
			delete(depacketizer);
	}

	virtual void onRTP(RTPIncomingSourceGroup* group,const RTPPacket::shared& packet)
	{
		//If depacketizer is not the same codec 
		if (depacketizer && depacketizer->GetCodec()!=packet->GetCodec())
		{
			//Delete it
			delete(depacketizer);
			//Create it next
			depacketizer = NULL;
		}
		//If we don't have a depacketized
		if (!depacketizer)
			//Create one
			depacketizer = RTPDepacketizer::Create(packet->GetMedia(),packet->GetCodec());
		//Ensure we have it
		if (!depacketizer)
			//Do nothing
			return;
		//Pass the pakcet to the depacketizer
		 MediaFrame* frame = depacketizer->AddPacket(packet);
		 
		 //If we have a new frame
		 if (frame)
		 {
			 //Call all listeners
			 for (Listeners::const_iterator it = listeners.begin();it!=listeners.end();++it)
				 //Call listener
				 (*it)->onMediaFrame(packet->GetSSRC(),*frame);
			 //Next
			 depacketizer->ResetFrame();
		 }
		
			
	}
	
	virtual void onEnded(RTPIncomingSourceGroup* group) 
	{
		if (incomingSource==group)
			incomingSource = nullptr;
	}
	
	void AddMediaListener(MediaFrame::Listener *listener)
	{
		//Add to set
		listeners.insert(listener);
	}
	
	void RemoveMediaListener(MediaFrame::Listener *listener)
	{
		//Remove from set
		listeners.erase(listener);
	}
	
	void Stop()
	{
		//If already stopped
		if (!incomingSource)
			//Done
			return;
		
		//Stop listeneing
		incomingSource->RemoveListener(this);
		//Clean it
		incomingSource = NULL;
	}
	
private:
	typedef std::set<MediaFrame::Listener*> Listeners;
private:
	Listeners listeners;
	RTPDepacketizer* depacketizer;
	RTPIncomingSourceGroup* incomingSource;
};


class SenderSideEstimatorListener : 
	public RemoteRateEstimator::Listener
{
public:
	SenderSideEstimatorListener()
	{
		
	}
	
	virtual void onTargetBitrateRequested(DWORD bitrate) override 
	{
        // todo make callback
	}
};



EvenSource::EvenSource()
{
}

EvenSource::EvenSource(const char* str)
{
}

EvenSource::EvenSource(const std::wstring &str)
{
}

EvenSource::~EvenSource()
{
}

void EvenSource::SendEvent(const char* type,const char* msg,...)
{
}


class LayerSources : public std::vector<LayerSource*>
{
public:
	size_t size() const  { return std::vector<LayerSource*>::size(); }
	LayerSource* get(size_t i)	{ return  std::vector<LayerSource*>::at(i); }
};

class ActiveSpeakerDetectorFacade :
	public ActiveSpeakerDetector,
	public ActiveSpeakerDetector::Listener,
	public RTPIncomingSourceGroup::Listener
{
public:	
	ActiveSpeakerDetectorFacade() :
		ActiveSpeakerDetector(this)
	{};
		
	virtual void onActiveSpeakerChanded(uint32_t id) override
	{
        // todo make callback
	}
	
	void AddIncomingSourceGroup(RTPIncomingSourceGroup* incoming)
	{
		if (incoming) incoming->AddListener(this);
	}
	
	void RemoveIncomingSourceGroup(RTPIncomingSourceGroup* incoming)
	{
		if (incoming)
		{	
			ScopedLock lock(mutex);
			incoming->RemoveListener(this);
			ActiveSpeakerDetector::Release(incoming->media.ssrc);
		}
	}
	
	virtual void onRTP(RTPIncomingSourceGroup* group,const RTPPacket::shared& packet) override
	{
		if (packet->HasAudioLevel())
		{
			ScopedLock lock(mutex);
			ActiveSpeakerDetector::Accumulate(packet->GetSSRC(), packet->GetVAD(),packet->GetLevel(), getTimeMS());
		}
	}		
	
	
	virtual void onEnded(RTPIncomingSourceGroup* group) override
	{
		
	}
private:
	Mutex mutex;
};



class MediaFrameListener :
	public MediaFrame::Listener
{
public:
	MediaFrameListener()
	{

	}

	virtual void onMediaFrame(MediaFrame &frame)  {

	}
	virtual void onMediaFrame(DWORD ssrc, MediaFrame &frame) {

		onMediaFrame(frame);
	}
	
};


class MediaStreamDuplicaterFacade :
	public RTPIncomingSourceGroup::Listener
{
public:
	MediaStreamDuplicaterFacade(RTPIncomingSourceGroup* incomingSource)
	{
		//Store
		this->incomingSource = incomingSource;
		//Add us as RTP listeners
		this->incomingSource->AddListener(this);
		//No depkacketixer yet
		depacketizer = NULL;
	}

	virtual ~MediaStreamDuplicaterFacade()
	{
		//JIC
		Stop();
		//Check 
		if (depacketizer)
			//Delete depacketier
			delete(depacketizer);
	}

	virtual void onRTP(RTPIncomingSourceGroup* group,const RTPPacket::shared& packet)
	{

		if (listeners.empty()) 
			return;

		//If depacketizer is not the same codec 
		if (depacketizer && depacketizer->GetCodec()!=packet->GetCodec())
		{
			//Delete it
			delete(depacketizer);
			//Create it next
			depacketizer = NULL;
		}
		//If we don't have a depacketized
		if (!depacketizer)
			//Create one
			depacketizer = RTPDepacketizer::Create(packet->GetMedia(),packet->GetCodec());
		//Ensure we have it
		if (!depacketizer)
			//Do nothing
			return;
		//Pass the pakcet to the depacketizer
		 MediaFrame* frame = depacketizer->AddPacket(packet);
		 
		 //If we have a new frame
		 if (frame)
		 {
			 //Call all listeners
			 for (Listeners::const_iterator it = listeners.begin();it!=listeners.end();++it)
				 //Call listener
				 (*it)->onMediaFrame(*frame);
			 //Next
			 depacketizer->ResetFrame();
		 }
	}
	
	virtual void onEnded(RTPIncomingSourceGroup* group) 
	{
		if (incomingSource==group)
			incomingSource = nullptr;
	}
	
	void AddMediaListener(MediaFrameListener *listener)
	{
		//Add to set
		listeners.insert(listener);
	}
	
	void RemoveMediaListener(MediaFrameListener *listener)
	{
		//Remove from set
		listeners.erase(listener);
	}
	
	void Stop()
	{
		//If already stopped
		if (!incomingSource)
			//Done
			return;
		
		//Stop listeneing
		incomingSource->RemoveListener(this);
		//Clean it
		incomingSource = NULL;
	}
	
private:
	typedef std::set<MediaFrameListener*> Listeners;
private:
	Listeners listeners;
	RTPDepacketizer* depacketizer;
	RTPIncomingSourceGroup* incomingSource;
};





#include <stdint.h>		// Use the C99 official header


#include <vector>
#include <stdexcept>

SWIGINTERN LayerSources RTPIncomingSource_layers(RTPIncomingSource *self){
			LayerSources layers;
			for(auto it = self->layers.begin(); it != self->layers.end(); ++it )
				layers.push_back(&(it->second));
			return layers;
		}

// C++ director class methods.
#include "mediaserver_wrap.h"

SwigDirector_SenderSideEstimatorListener::SwigDirector_SenderSideEstimatorListener(int swig_p)
    : SenderSideEstimatorListener(),
      go_val(swig_p), swig_mem(0)
{ }

extern "C" void Swiggo_DeleteDirector_SenderSideEstimatorListener_mediaserver_3513984b9ef493bf(intgo);
SwigDirector_SenderSideEstimatorListener::~SwigDirector_SenderSideEstimatorListener()
{
  Swiggo_DeleteDirector_SenderSideEstimatorListener_mediaserver_3513984b9ef493bf(go_val);
  delete swig_mem;
}

SwigDirector_MediaFrameListener::SwigDirector_MediaFrameListener(int swig_p)
    : MediaFrameListener(),
      go_val(swig_p), swig_mem(0)
{ }

extern "C" void Swiggo_DeleteDirector_MediaFrameListener_mediaserver_3513984b9ef493bf(intgo);
SwigDirector_MediaFrameListener::~SwigDirector_MediaFrameListener()
{
  Swiggo_DeleteDirector_MediaFrameListener_mediaserver_3513984b9ef493bf(go_val);
  delete swig_mem;
}

extern "C" void Swig_DirectorMediaFrameListener_callback_onMediaFrame_mediaserver_3513984b9ef493bf(int, MediaFrame *arg2);
void SwigDirector_MediaFrameListener::onMediaFrame(MediaFrame &frame) {
  MediaFrame *swig_arg2;
  
  swig_arg2 = (MediaFrame *)&frame; 
  Swig_DirectorMediaFrameListener_callback_onMediaFrame_mediaserver_3513984b9ef493bf(go_val, swig_arg2);
}

SwigDirector_PlayerEndListener::SwigDirector_PlayerEndListener(int swig_p)
    : PlayerEndListener(),
      go_val(swig_p), swig_mem(0)
{ }

extern "C" void Swiggo_DeleteDirector_PlayerEndListener_mediaserver_3513984b9ef493bf(intgo);
SwigDirector_PlayerEndListener::~SwigDirector_PlayerEndListener()
{
  Swiggo_DeleteDirector_PlayerEndListener_mediaserver_3513984b9ef493bf(go_val);
  delete swig_mem;
}

extern "C" void Swig_DirectorPlayerEndListener_callback_onEnd_mediaserver_3513984b9ef493bf(int);
void SwigDirector_PlayerEndListener::onEnd() {
  Swig_DirectorPlayerEndListener_callback_onEnd_mediaserver_3513984b9ef493bf(go_val);
}

SwigDirector_REMBBitrateListener::SwigDirector_REMBBitrateListener(int swig_p)
    : REMBBitrateListener(),
      go_val(swig_p), swig_mem(0)
{ }

extern "C" void Swiggo_DeleteDirector_REMBBitrateListener_mediaserver_3513984b9ef493bf(intgo);
SwigDirector_REMBBitrateListener::~SwigDirector_REMBBitrateListener()
{
  Swiggo_DeleteDirector_REMBBitrateListener_mediaserver_3513984b9ef493bf(go_val);
  delete swig_mem;
}

extern "C" void Swig_DirectorREMBBitrateListener_callback_onREMB_mediaserver_3513984b9ef493bf(int);
void SwigDirector_REMBBitrateListener::onREMB() {
  Swig_DirectorREMBBitrateListener_callback_onREMB_mediaserver_3513984b9ef493bf(go_val);
}

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_mediaserver_3513984b9ef493bf(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_mediaserver_3513984b9ef493bf(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


intgo _wrap_GetWidth_mediaserver_3513984b9ef493bf(intgo _swig_go_0) {
  uint32_t arg1 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = (uint32_t)_swig_go_0; 
  
  result = (uint32_t)GetWidth(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_GetHeight_mediaserver_3513984b9ef493bf(intgo _swig_go_0) {
  uint32_t arg1 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = (uint32_t)_swig_go_0; 
  
  result = (uint32_t)GetHeight(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Properties_HasProperty_mediaserver_3513984b9ef493bf(Properties *_swig_go_0, std::string *_swig_go_1) {
  Properties *arg1 = (Properties *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Properties **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  result = (bool)((Properties const *)arg1)->HasProperty((std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Properties_SetProperty__SWIG_0_mediaserver_3513984b9ef493bf(Properties *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  Properties *arg1 = (Properties *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = *(Properties **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (int)_swig_go_2; 
  
  (arg1)->SetProperty((char const *)arg2,arg3);
  
  free(arg2); 
}


void _wrap_Properties_SetProperty__SWIG_1_mediaserver_3513984b9ef493bf(Properties *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  Properties *arg1 = (Properties *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = *(Properties **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  (arg1)->SetProperty((char const *)arg2,(char const *)arg3);
  
  free(arg2); 
  free(arg3); 
}


void _wrap_Properties_SetProperty__SWIG_2_mediaserver_3513984b9ef493bf(Properties *_swig_go_0, std::string *_swig_go_1, std::string *_swig_go_2) {
  Properties *arg1 = (Properties *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(Properties **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  arg3 = *(std::string **)&_swig_go_2; 
  
  (arg1)->SetProperty((std::string const &)*arg2,(std::string const &)*arg3);
  
}


void _wrap_Properties_GetChildren__SWIG_0_mediaserver_3513984b9ef493bf(Properties *_swig_go_0, std::string *_swig_go_1, Properties *_swig_go_2) {
  Properties *arg1 = (Properties *) 0 ;
  std::string *arg2 = 0 ;
  Properties *arg3 = 0 ;
  
  arg1 = *(Properties **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  arg3 = *(Properties **)&_swig_go_2; 
  
  ((Properties const *)arg1)->GetChildren((std::string const &)*arg2,*arg3);
  
}


void _wrap_Properties_GetChildren__SWIG_1_mediaserver_3513984b9ef493bf(Properties *_swig_go_0, _gostring_ _swig_go_1, Properties *_swig_go_2) {
  Properties *arg1 = (Properties *) 0 ;
  char *arg2 = (char *) 0 ;
  Properties *arg3 = 0 ;
  
  arg1 = *(Properties **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(Properties **)&_swig_go_2; 
  
  ((Properties const *)arg1)->GetChildren((char const *)arg2,*arg3);
  
  free(arg2); 
}


Properties *_wrap_Properties_GetChildren__SWIG_2_mediaserver_3513984b9ef493bf(Properties *_swig_go_0, std::string *_swig_go_1) {
  Properties *arg1 = (Properties *) 0 ;
  std::string *arg2 = 0 ;
  Properties result;
  Properties *_swig_go_result;
  
  arg1 = *(Properties **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  result = ((Properties const *)arg1)->GetChildren((std::string const &)*arg2);
  *(Properties **)&_swig_go_result = new Properties(result); 
  return _swig_go_result;
}


Properties *_wrap_Properties_GetChildren__SWIG_3_mediaserver_3513984b9ef493bf(Properties *_swig_go_0, _gostring_ _swig_go_1) {
  Properties *arg1 = (Properties *) 0 ;
  char *arg2 = (char *) 0 ;
  Properties result;
  Properties *_swig_go_result;
  
  arg1 = *(Properties **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = ((Properties const *)arg1)->GetChildren((char const *)arg2);
  *(Properties **)&_swig_go_result = new Properties(result); 
  free(arg2); 
  return _swig_go_result;
}


void _wrap_Properties_GetChildrenArray_mediaserver_3513984b9ef493bf(Properties *_swig_go_0, _gostring_ _swig_go_1, std::vector< Properties > *_swig_go_2) {
  Properties *arg1 = (Properties *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< Properties > *arg3 = 0 ;
  
  arg1 = *(Properties **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = *(std::vector< Properties > **)&_swig_go_2; 
  
  ((Properties const *)arg1)->GetChildrenArray((char const *)arg2,*arg3);
  
  free(arg2); 
}


_gostring_ _wrap_Properties_GetProperty__SWIG_0_mediaserver_3513984b9ef493bf(Properties *_swig_go_0, _gostring_ _swig_go_1) {
  Properties *arg1 = (Properties *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(Properties **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (char *)((Properties const *)arg1)->GetProperty((char const *)arg2);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  free(arg2); 
  return _swig_go_result;
}


std::string *_wrap_Properties_GetProperty__SWIG_1_mediaserver_3513984b9ef493bf(Properties *_swig_go_0, _gostring_ _swig_go_1, std::string *_swig_go_2) {
  Properties *arg1 = (Properties *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string arg3 ;
  std::string const *argp3 ;
  std::string result;
  std::string *_swig_go_result;
  
  arg1 = *(Properties **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  argp3 = (std::string *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::string const");
  }
  arg3 = (std::string)*argp3;
  
  
  result = ((Properties const *)arg1)->GetProperty((char const *)arg2,arg3);
  *(std::string **)&_swig_go_result = new std::string(result); 
  free(arg2); 
  return _swig_go_result;
}


std::string *_wrap_Properties_GetProperty__SWIG_2_mediaserver_3513984b9ef493bf(Properties *_swig_go_0, std::string *_swig_go_1, std::string *_swig_go_2) {
  Properties *arg1 = (Properties *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  std::string const *argp3 ;
  std::string result;
  std::string *_swig_go_result;
  
  arg1 = *(Properties **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  argp3 = (std::string *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::string const");
  }
  arg3 = (std::string)*argp3;
  
  
  result = ((Properties const *)arg1)->GetProperty((std::string const &)*arg2,arg3);
  *(std::string **)&_swig_go_result = new std::string(result); 
  return _swig_go_result;
}


_gostring_ _wrap_Properties_GetProperty__SWIG_3_mediaserver_3513984b9ef493bf(Properties *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  Properties *arg1 = (Properties *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(Properties **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  result = (char *)((Properties const *)arg1)->GetProperty((char const *)arg2,(char const *)arg3);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  free(arg2); 
  free(arg3); 
  return _swig_go_result;
}


_gostring_ _wrap_Properties_GetProperty__SWIG_4_mediaserver_3513984b9ef493bf(Properties *_swig_go_0, std::string *_swig_go_1, _gostring_ _swig_go_2) {
  Properties *arg1 = (Properties *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(Properties **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  result = (char *)((Properties const *)arg1)->GetProperty((std::string const &)*arg2,arg3);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  free(arg3); 
  return _swig_go_result;
}


intgo _wrap_Properties_GetProperty__SWIG_5_mediaserver_3513984b9ef493bf(Properties *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  Properties *arg1 = (Properties *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(Properties **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (int)_swig_go_2; 
  
  result = (int)((Properties const *)arg1)->GetProperty((char const *)arg2,arg3);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_Properties_GetProperty__SWIG_6_mediaserver_3513984b9ef493bf(Properties *_swig_go_0, std::string *_swig_go_1, intgo _swig_go_2) {
  Properties *arg1 = (Properties *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(Properties **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  result = (int)((Properties const *)arg1)->GetProperty((std::string const &)*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_Properties_GetProperty__SWIG_7_mediaserver_3513984b9ef493bf(Properties *_swig_go_0, _gostring_ _swig_go_1, long long _swig_go_2) {
  Properties *arg1 = (Properties *) 0 ;
  char *arg2 = (char *) 0 ;
  uint64_t arg3 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(Properties **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (uint64_t)_swig_go_2; 
  
  result = (uint64_t)((Properties const *)arg1)->GetProperty((char const *)arg2,arg3);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


long long _wrap_Properties_GetProperty__SWIG_8_mediaserver_3513984b9ef493bf(Properties *_swig_go_0, std::string *_swig_go_1, long long _swig_go_2) {
  Properties *arg1 = (Properties *) 0 ;
  std::string *arg2 = 0 ;
  uint64_t arg3 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(Properties **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  arg3 = (uint64_t)_swig_go_2; 
  
  result = (uint64_t)((Properties const *)arg1)->GetProperty((std::string const &)*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Properties_GetProperty__SWIG_9_mediaserver_3513984b9ef493bf(Properties *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  Properties *arg1 = (Properties *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Properties **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (bool)_swig_go_2; 
  
  result = (bool)((Properties const *)arg1)->GetProperty((char const *)arg2,arg3);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


bool _wrap_Properties_GetProperty__SWIG_10_mediaserver_3513984b9ef493bf(Properties *_swig_go_0, std::string *_swig_go_1, bool _swig_go_2) {
  Properties *arg1 = (Properties *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Properties **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  
  result = (bool)((Properties const *)arg1)->GetProperty((std::string const &)*arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


Properties *_wrap_new_Properties_mediaserver_3513984b9ef493bf() {
  Properties *result = 0 ;
  Properties *_swig_go_result;
  
  
  result = (Properties *)new Properties();
  *(Properties **)&_swig_go_result = (Properties *)result; 
  return _swig_go_result;
}


void _wrap_delete_Properties_mediaserver_3513984b9ef493bf(Properties *_swig_go_0) {
  Properties *arg1 = (Properties *) 0 ;
  
  arg1 = *(Properties **)&_swig_go_0; 
  
  delete arg1;
  
}


void *_wrap_malloc32_mediaserver_3513984b9ef493bf(long long _swig_go_0) {
  size_t arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (void *)malloc32(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


ByteBuffer *_wrap_new_ByteBuffer__SWIG_0_mediaserver_3513984b9ef493bf() {
  ByteBuffer *result = 0 ;
  ByteBuffer *_swig_go_result;
  
  
  result = (ByteBuffer *)new ByteBuffer();
  *(ByteBuffer **)&_swig_go_result = (ByteBuffer *)result; 
  return _swig_go_result;
}


ByteBuffer *_wrap_new_ByteBuffer__SWIG_1_mediaserver_3513984b9ef493bf(intgo _swig_go_0) {
  uint32_t arg1 ;
  ByteBuffer *result = 0 ;
  ByteBuffer *_swig_go_result;
  
  arg1 = (uint32_t)_swig_go_0; 
  
  result = (ByteBuffer *)new ByteBuffer(arg1);
  *(ByteBuffer **)&_swig_go_result = (ByteBuffer *)result; 
  return _swig_go_result;
}


ByteBuffer *_wrap_new_ByteBuffer__SWIG_2_mediaserver_3513984b9ef493bf(char *_swig_go_0, intgo _swig_go_1) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint32_t arg2 ;
  ByteBuffer *result = 0 ;
  ByteBuffer *_swig_go_result;
  
  arg1 = *(uint8_t **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  result = (ByteBuffer *)new ByteBuffer((uint8_t const *)arg1,arg2);
  *(ByteBuffer **)&_swig_go_result = (ByteBuffer *)result; 
  return _swig_go_result;
}


ByteBuffer *_wrap_new_ByteBuffer__SWIG_3_mediaserver_3513984b9ef493bf(ByteBuffer *_swig_go_0) {
  ByteBuffer *arg1 = (ByteBuffer *) 0 ;
  ByteBuffer *result = 0 ;
  ByteBuffer *_swig_go_result;
  
  arg1 = *(ByteBuffer **)&_swig_go_0; 
  
  result = (ByteBuffer *)new ByteBuffer((ByteBuffer const *)arg1);
  *(ByteBuffer **)&_swig_go_result = (ByteBuffer *)result; 
  return _swig_go_result;
}


ByteBuffer *_wrap_new_ByteBuffer__SWIG_4_mediaserver_3513984b9ef493bf(ByteBuffer *_swig_go_0) {
  ByteBuffer *arg1 = 0 ;
  ByteBuffer *result = 0 ;
  ByteBuffer *_swig_go_result;
  
  arg1 = *(ByteBuffer **)&_swig_go_0; 
  
  result = (ByteBuffer *)new ByteBuffer((ByteBuffer const &)*arg1);
  *(ByteBuffer **)&_swig_go_result = (ByteBuffer *)result; 
  return _swig_go_result;
}


ByteBuffer *_wrap_ByteBuffer_Clone_mediaserver_3513984b9ef493bf(ByteBuffer *_swig_go_0) {
  ByteBuffer *arg1 = (ByteBuffer *) 0 ;
  ByteBuffer *result = 0 ;
  ByteBuffer *_swig_go_result;
  
  arg1 = *(ByteBuffer **)&_swig_go_0; 
  
  result = (ByteBuffer *)((ByteBuffer const *)arg1)->Clone();
  *(ByteBuffer **)&_swig_go_result = (ByteBuffer *)result; 
  return _swig_go_result;
}


void _wrap_delete_ByteBuffer_mediaserver_3513984b9ef493bf(ByteBuffer *_swig_go_0) {
  ByteBuffer *arg1 = (ByteBuffer *) 0 ;
  
  arg1 = *(ByteBuffer **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_ByteBuffer_Alloc_mediaserver_3513984b9ef493bf(ByteBuffer *_swig_go_0, intgo _swig_go_1) {
  ByteBuffer *arg1 = (ByteBuffer *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(ByteBuffer **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  (arg1)->Alloc(arg2);
  
}


void _wrap_ByteBuffer_Set_mediaserver_3513984b9ef493bf(ByteBuffer *_swig_go_0, char *_swig_go_1, intgo _swig_go_2) {
  ByteBuffer *arg1 = (ByteBuffer *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint32_t arg3 ;
  
  arg1 = *(ByteBuffer **)&_swig_go_0; 
  arg2 = *(uint8_t **)&_swig_go_1; 
  arg3 = (uint32_t)_swig_go_2; 
  
  (arg1)->Set((uint8_t const *)arg2,arg3);
  
}


intgo _wrap_ByteBuffer_Append_mediaserver_3513984b9ef493bf(ByteBuffer *_swig_go_0, char *_swig_go_1, intgo _swig_go_2) {
  ByteBuffer *arg1 = (ByteBuffer *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint32_t arg3 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(ByteBuffer **)&_swig_go_0; 
  arg2 = *(uint8_t **)&_swig_go_1; 
  arg3 = (uint32_t)_swig_go_2; 
  
  result = (uint32_t)(arg1)->Append((uint8_t const *)arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


char *_wrap_ByteBuffer_GetData_mediaserver_3513984b9ef493bf(ByteBuffer *_swig_go_0) {
  ByteBuffer *arg1 = (ByteBuffer *) 0 ;
  uint8_t *result = 0 ;
  char *_swig_go_result;
  
  arg1 = *(ByteBuffer **)&_swig_go_0; 
  
  result = (uint8_t *)((ByteBuffer const *)arg1)->GetData();
  *(uint8_t **)&_swig_go_result = (uint8_t *)result; 
  return _swig_go_result;
}


intgo _wrap_ByteBuffer_GetSize_mediaserver_3513984b9ef493bf(ByteBuffer *_swig_go_0) {
  ByteBuffer *arg1 = (ByteBuffer *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(ByteBuffer **)&_swig_go_0; 
  
  result = (uint32_t)((ByteBuffer const *)arg1)->GetSize();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_ByteBuffer_GetLength_mediaserver_3513984b9ef493bf(ByteBuffer *_swig_go_0) {
  ByteBuffer *arg1 = (ByteBuffer *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(ByteBuffer **)&_swig_go_0; 
  
  result = (uint32_t)((ByteBuffer const *)arg1)->GetLength();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Audio_MediaFrame_mediaserver_3513984b9ef493bf() {
  MediaFrame::Type result;
  intgo _swig_go_result;
  
  
  result = MediaFrame::Audio;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Video_MediaFrame_mediaserver_3513984b9ef493bf() {
  MediaFrame::Type result;
  intgo _swig_go_result;
  
  
  result = MediaFrame::Video;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Text_MediaFrame_mediaserver_3513984b9ef493bf() {
  MediaFrame::Type result;
  intgo _swig_go_result;
  
  
  result = MediaFrame::Text;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Unknown_MediaFrame_mediaserver_3513984b9ef493bf() {
  MediaFrame::Type result;
  intgo _swig_go_result;
  
  
  result = MediaFrame::Unknown;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


_gostring_ _wrap_MediaFrame_TypeToString_mediaserver_3513984b9ef493bf(intgo _swig_go_0) {
  MediaFrame::Type arg1 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = (MediaFrame::Type)_swig_go_0; 
  
  result = (char *)MediaFrame::TypeToString(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_delete_MediaFrame_mediaserver_3513984b9ef493bf(MediaFrame *_swig_go_0) {
  MediaFrame *arg1 = (MediaFrame *) 0 ;
  
  arg1 = *(MediaFrame **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_MediaFrame_ClearRTPPacketizationInfo_mediaserver_3513984b9ef493bf(MediaFrame *_swig_go_0) {
  MediaFrame *arg1 = (MediaFrame *) 0 ;
  
  arg1 = *(MediaFrame **)&_swig_go_0; 
  
  (arg1)->ClearRTPPacketizationInfo();
  
}


void _wrap_MediaFrame_AddRtpPacket_mediaserver_3513984b9ef493bf(MediaFrame *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, char *_swig_go_3, intgo _swig_go_4) {
  MediaFrame *arg1 = (MediaFrame *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  uint32_t arg5 ;
  
  arg1 = *(MediaFrame **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  arg3 = (uint32_t)_swig_go_2; 
  arg4 = *(uint8_t **)&_swig_go_3; 
  arg5 = (uint32_t)_swig_go_4; 
  
  (arg1)->AddRtpPacket(arg2,arg3,arg4,arg5);
  
}


intgo _wrap_MediaFrame_GetType_mediaserver_3513984b9ef493bf(MediaFrame *_swig_go_0) {
  MediaFrame *arg1 = (MediaFrame *) 0 ;
  MediaFrame::Type result;
  intgo _swig_go_result;
  
  arg1 = *(MediaFrame **)&_swig_go_0; 
  
  result = (MediaFrame::Type)((MediaFrame const *)arg1)->GetType();
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_MediaFrame_GetTimeStamp_mediaserver_3513984b9ef493bf(MediaFrame *_swig_go_0) {
  MediaFrame *arg1 = (MediaFrame *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(MediaFrame **)&_swig_go_0; 
  
  result = (uint32_t)((MediaFrame const *)arg1)->GetTimeStamp();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_MediaFrame_SetTimestamp_mediaserver_3513984b9ef493bf(MediaFrame *_swig_go_0, intgo _swig_go_1) {
  MediaFrame *arg1 = (MediaFrame *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(MediaFrame **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  (arg1)->SetTimestamp(arg2);
  
}


long long _wrap_MediaFrame_GetTime_mediaserver_3513984b9ef493bf(MediaFrame *_swig_go_0) {
  MediaFrame *arg1 = (MediaFrame *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(MediaFrame **)&_swig_go_0; 
  
  result = (uint64_t)((MediaFrame const *)arg1)->GetTime();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_MediaFrame_SetTime_mediaserver_3513984b9ef493bf(MediaFrame *_swig_go_0, long long _swig_go_1) {
  MediaFrame *arg1 = (MediaFrame *) 0 ;
  uint64_t arg2 ;
  
  arg1 = *(MediaFrame **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  
  (arg1)->SetTime(arg2);
  
}


intgo _wrap_MediaFrame_GetSSRC_mediaserver_3513984b9ef493bf(MediaFrame *_swig_go_0) {
  MediaFrame *arg1 = (MediaFrame *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(MediaFrame **)&_swig_go_0; 
  
  result = (uint32_t)((MediaFrame const *)arg1)->GetSSRC();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_MediaFrame_SetSSRC_mediaserver_3513984b9ef493bf(MediaFrame *_swig_go_0, intgo _swig_go_1) {
  MediaFrame *arg1 = (MediaFrame *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(MediaFrame **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  (arg1)->SetSSRC(arg2);
  
}


bool _wrap_MediaFrame_HasRtpPacketizationInfo_mediaserver_3513984b9ef493bf(MediaFrame *_swig_go_0) {
  MediaFrame *arg1 = (MediaFrame *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(MediaFrame **)&_swig_go_0; 
  
  result = (bool)((MediaFrame const *)arg1)->HasRtpPacketizationInfo();
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< MediaFrame::RtpPacketization * > *_wrap_MediaFrame_GetRtpPacketizationInfo_mediaserver_3513984b9ef493bf(MediaFrame *_swig_go_0) {
  MediaFrame *arg1 = (MediaFrame *) 0 ;
  MediaFrame::RtpPacketizationInfo *result = 0 ;
  std::vector< MediaFrame::RtpPacketization * > *_swig_go_result;
  
  arg1 = *(MediaFrame **)&_swig_go_0; 
  
  result = (MediaFrame::RtpPacketizationInfo *) &((MediaFrame const *)arg1)->GetRtpPacketizationInfo();
  *(MediaFrame::RtpPacketizationInfo **)&_swig_go_result = result; 
  return _swig_go_result;
}


MediaFrame *_wrap_MediaFrame_Clone_mediaserver_3513984b9ef493bf(MediaFrame *_swig_go_0) {
  MediaFrame *arg1 = (MediaFrame *) 0 ;
  MediaFrame *result = 0 ;
  MediaFrame *_swig_go_result;
  
  arg1 = *(MediaFrame **)&_swig_go_0; 
  
  result = (MediaFrame *)(arg1)->Clone();
  *(MediaFrame **)&_swig_go_result = (MediaFrame *)result; 
  return _swig_go_result;
}


intgo _wrap_MediaFrame_GetDuration_mediaserver_3513984b9ef493bf(MediaFrame *_swig_go_0) {
  MediaFrame *arg1 = (MediaFrame *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(MediaFrame **)&_swig_go_0; 
  
  result = (uint32_t)((MediaFrame const *)arg1)->GetDuration();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_MediaFrame_SetDuration_mediaserver_3513984b9ef493bf(MediaFrame *_swig_go_0, intgo _swig_go_1) {
  MediaFrame *arg1 = (MediaFrame *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(MediaFrame **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  (arg1)->SetDuration(arg2);
  
}


char *_wrap_MediaFrame_GetData_mediaserver_3513984b9ef493bf(MediaFrame *_swig_go_0) {
  MediaFrame *arg1 = (MediaFrame *) 0 ;
  uint8_t *result = 0 ;
  char *_swig_go_result;
  
  arg1 = *(MediaFrame **)&_swig_go_0; 
  
  result = (uint8_t *)((MediaFrame const *)arg1)->GetData();
  *(uint8_t **)&_swig_go_result = (uint8_t *)result; 
  return _swig_go_result;
}


intgo _wrap_MediaFrame_GetLength_mediaserver_3513984b9ef493bf(MediaFrame *_swig_go_0) {
  MediaFrame *arg1 = (MediaFrame *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(MediaFrame **)&_swig_go_0; 
  
  result = (uint32_t)((MediaFrame const *)arg1)->GetLength();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_MediaFrame_GetMaxMediaLength_mediaserver_3513984b9ef493bf(MediaFrame *_swig_go_0) {
  MediaFrame *arg1 = (MediaFrame *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(MediaFrame **)&_swig_go_0; 
  
  result = (uint32_t)((MediaFrame const *)arg1)->GetMaxMediaLength();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_MediaFrame_SetLength_mediaserver_3513984b9ef493bf(MediaFrame *_swig_go_0, intgo _swig_go_1) {
  MediaFrame *arg1 = (MediaFrame *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(MediaFrame **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  (arg1)->SetLength(arg2);
  
}


void _wrap_MediaFrame_Alloc_mediaserver_3513984b9ef493bf(MediaFrame *_swig_go_0, intgo _swig_go_1) {
  MediaFrame *arg1 = (MediaFrame *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(MediaFrame **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  (arg1)->Alloc(arg2);
  
}


void _wrap_MediaFrame_SetMedia_mediaserver_3513984b9ef493bf(MediaFrame *_swig_go_0, char *_swig_go_1, intgo _swig_go_2) {
  MediaFrame *arg1 = (MediaFrame *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint32_t arg3 ;
  
  arg1 = *(MediaFrame **)&_swig_go_0; 
  arg2 = *(uint8_t **)&_swig_go_1; 
  arg3 = (uint32_t)_swig_go_2; 
  
  (arg1)->SetMedia(arg2,arg3);
  
}


intgo _wrap_MediaFrame_AppendMedia_mediaserver_3513984b9ef493bf(MediaFrame *_swig_go_0, char *_swig_go_1, intgo _swig_go_2) {
  MediaFrame *arg1 = (MediaFrame *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint32_t arg3 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(MediaFrame **)&_swig_go_0; 
  arg2 = *(uint8_t **)&_swig_go_1; 
  arg3 = (uint32_t)_swig_go_2; 
  
  result = (uint32_t)(arg1)->AppendMedia(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


Acumulator *_wrap_new_Acumulator_mediaserver_3513984b9ef493bf(intgo _swig_go_0) {
  uint32_t arg1 ;
  Acumulator *result = 0 ;
  Acumulator *_swig_go_result;
  
  arg1 = (uint32_t)_swig_go_0; 
  
  result = (Acumulator *)new Acumulator(arg1);
  *(Acumulator **)&_swig_go_result = (Acumulator *)result; 
  return _swig_go_result;
}


long long _wrap_Acumulator_GetAcumulated_mediaserver_3513984b9ef493bf(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (uint64_t)((Acumulator const *)arg1)->GetAcumulated();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_Acumulator_GetDiff_mediaserver_3513984b9ef493bf(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (uint64_t)((Acumulator const *)arg1)->GetDiff();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_Acumulator_GetInstant_mediaserver_3513984b9ef493bf(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (uint64_t)((Acumulator const *)arg1)->GetInstant();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_Acumulator_GetMin_mediaserver_3513984b9ef493bf(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (uint64_t)((Acumulator const *)arg1)->GetMin();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_Acumulator_GetMax_mediaserver_3513984b9ef493bf(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (uint64_t)((Acumulator const *)arg1)->GetMax();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Acumulator_GetWindow_mediaserver_3513984b9ef493bf(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (uint32_t)((Acumulator const *)arg1)->GetWindow();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Acumulator_IsInWindow_mediaserver_3513984b9ef493bf(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (bool)((Acumulator const *)arg1)->IsInWindow();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Acumulator_IsInMinMaxWindow_mediaserver_3513984b9ef493bf(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (bool)((Acumulator const *)arg1)->IsInMinMaxWindow();
  _swig_go_result = result; 
  return _swig_go_result;
}


long double *_wrap_Acumulator_GetInstantMedia_mediaserver_3513984b9ef493bf(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  long double result;
  long double *_swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (long double)((Acumulator const *)arg1)->GetInstantMedia();
  *(long double **)&_swig_go_result = new long double(result); 
  return _swig_go_result;
}


long double *_wrap_Acumulator_GetInstantAvg_mediaserver_3513984b9ef493bf(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  long double result;
  long double *_swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (long double)((Acumulator const *)arg1)->GetInstantAvg();
  *(long double **)&_swig_go_result = new long double(result); 
  return _swig_go_result;
}


long double *_wrap_Acumulator_GetAverage_mediaserver_3513984b9ef493bf(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  long double result;
  long double *_swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (long double)((Acumulator const *)arg1)->GetAverage();
  *(long double **)&_swig_go_result = new long double(result); 
  return _swig_go_result;
}


long double *_wrap_Acumulator_GetMinAvg_mediaserver_3513984b9ef493bf(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  long double result;
  long double *_swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (long double)((Acumulator const *)arg1)->GetMinAvg();
  *(long double **)&_swig_go_result = new long double(result); 
  return _swig_go_result;
}


long double *_wrap_Acumulator_GetMaxAvg_mediaserver_3513984b9ef493bf(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  long double result;
  long double *_swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (long double)((Acumulator const *)arg1)->GetMaxAvg();
  *(long double **)&_swig_go_result = new long double(result); 
  return _swig_go_result;
}


void _wrap_Acumulator_ResetMinMax_mediaserver_3513984b9ef493bf(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  (arg1)->ResetMinMax();
  
}


void _wrap_Acumulator_Reset_mediaserver_3513984b9ef493bf(Acumulator *_swig_go_0, long long _swig_go_1) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  uint64_t arg2 ;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  
  (arg1)->Reset(arg2);
  
}


long long _wrap_Acumulator_Update__SWIG_0_mediaserver_3513984b9ef493bf(Acumulator *_swig_go_0, long long _swig_go_1, intgo _swig_go_2) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  uint64_t arg2 ;
  uint32_t arg3 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  arg3 = (uint32_t)_swig_go_2; 
  
  result = (uint64_t)(arg1)->Update(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_Acumulator_Update__SWIG_1_mediaserver_3513984b9ef493bf(Acumulator *_swig_go_0, long long _swig_go_1) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  uint64_t arg2 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  
  result = (uint64_t)(arg1)->Update(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Acumulator_GetMinValueInWindow_mediaserver_3513984b9ef493bf(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (uint32_t)((Acumulator const *)arg1)->GetMinValueInWindow();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Acumulator_GetMaxValueInWindow_mediaserver_3513984b9ef493bf(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (uint32_t)((Acumulator const *)arg1)->GetMaxValueInWindow();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_Acumulator_GetCount_mediaserver_3513984b9ef493bf(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  result = (uint32_t)((Acumulator const *)arg1)->GetCount();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_Acumulator_mediaserver_3513984b9ef493bf(Acumulator *_swig_go_0) {
  Acumulator *arg1 = (Acumulator *) 0 ;
  
  arg1 = *(Acumulator **)&_swig_go_0; 
  
  delete arg1;
  
}


DTLSICETransport *_wrap_new_DTLSICETransport_mediaserver_3513984b9ef493bf(DTLSICETransport::Sender *_swig_go_0) {
  DTLSICETransport::Sender *arg1 = (DTLSICETransport::Sender *) 0 ;
  DTLSICETransport *result = 0 ;
  DTLSICETransport *_swig_go_result;
  
  arg1 = *(DTLSICETransport::Sender **)&_swig_go_0; 
  
  result = (DTLSICETransport *)new DTLSICETransport(arg1);
  *(DTLSICETransport **)&_swig_go_result = (DTLSICETransport *)result; 
  return _swig_go_result;
}


void _wrap_delete_DTLSICETransport_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_DTLSICETransport_Start_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  (arg1)->Start();
  
}


void _wrap_DTLSICETransport_Stop_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  (arg1)->Stop();
  
}


void _wrap_DTLSICETransport_SetSRTPProtectionProfiles_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, std::string *_swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  (arg1)->SetSRTPProtectionProfiles((std::string const &)*arg2);
  
}


void _wrap_DTLSICETransport_SetRemoteProperties_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, Properties *_swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  Properties *arg2 = 0 ;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(Properties **)&_swig_go_1; 
  
  (arg1)->SetRemoteProperties((Properties const &)*arg2);
  
}


void _wrap_DTLSICETransport_SetLocalProperties_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, Properties *_swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  Properties *arg2 = 0 ;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(Properties **)&_swig_go_1; 
  
  (arg1)->SetLocalProperties((Properties const &)*arg2);
  
}


intgo _wrap_DTLSICETransport_SendPLI_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, intgo _swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  uint32_t arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  result = (int)(arg1)->SendPLI(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_Enqueue_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, RTPPacket::shared *_swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  RTPPacket::shared *arg2 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(RTPPacket::shared **)&_swig_go_1; 
  
  result = (int)(arg1)->Enqueue((RTPPacket::shared const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_Dump__SWIG_0_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2, bool _swig_go_3, bool _swig_go_4) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (bool)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  arg5 = (bool)_swig_go_4; 
  
  result = (int)(arg1)->Dump((char const *)arg2,arg3,arg4,arg5);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_Dump__SWIG_1_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2, bool _swig_go_3) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (bool)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  
  result = (int)(arg1)->Dump((char const *)arg2,arg3,arg4);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_Dump__SWIG_2_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (bool)_swig_go_2; 
  
  result = (int)(arg1)->Dump((char const *)arg2,arg3);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_Dump__SWIG_3_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, _gostring_ _swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (int)(arg1)->Dump((char const *)arg2);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_Dump__SWIG_4_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, UDPDumper *_swig_go_1, bool _swig_go_2, bool _swig_go_3, bool _swig_go_4) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  UDPDumper *arg2 = (UDPDumper *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(UDPDumper **)&_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  arg5 = (bool)_swig_go_4; 
  
  result = (int)(arg1)->Dump(arg2,arg3,arg4,arg5);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_Dump__SWIG_5_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, UDPDumper *_swig_go_1, bool _swig_go_2, bool _swig_go_3) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  UDPDumper *arg2 = (UDPDumper *) 0 ;
  bool arg3 ;
  bool arg4 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(UDPDumper **)&_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  
  result = (int)(arg1)->Dump(arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_Dump__SWIG_6_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, UDPDumper *_swig_go_1, bool _swig_go_2) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  UDPDumper *arg2 = (UDPDumper *) 0 ;
  bool arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(UDPDumper **)&_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  
  result = (int)(arg1)->Dump(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_Dump__SWIG_7_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, UDPDumper *_swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  UDPDumper *arg2 = (UDPDumper *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(UDPDumper **)&_swig_go_1; 
  
  result = (int)(arg1)->Dump(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_DTLSICETransport_Reset_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  (arg1)->Reset();
  
}


void _wrap_DTLSICETransport_ActivateRemoteCandidate_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, ICERemoteCandidate *_swig_go_1, bool _swig_go_2, intgo _swig_go_3) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  ICERemoteCandidate *arg2 = (ICERemoteCandidate *) 0 ;
  bool arg3 ;
  uint32_t arg4 ;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(ICERemoteCandidate **)&_swig_go_1; 
  arg3 = (bool)_swig_go_2; 
  arg4 = (uint32_t)_swig_go_3; 
  
  (arg1)->ActivateRemoteCandidate(arg2,arg3,arg4);
  
}


intgo _wrap_DTLSICETransport_SetRemoteCryptoDTLS_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';
  
  
  result = (int)(arg1)->SetRemoteCryptoDTLS((char const *)arg2,(char const *)arg3,(char const *)arg4);
  _swig_go_result = result; 
  free(arg2); 
  free(arg3); 
  free(arg4); 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_SetLocalSTUNCredentials_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  result = (int)(arg1)->SetLocalSTUNCredentials((char const *)arg2,(char const *)arg3);
  _swig_go_result = result; 
  free(arg2); 
  free(arg3); 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_SetRemoteSTUNCredentials_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  result = (int)(arg1)->SetRemoteSTUNCredentials((char const *)arg2,(char const *)arg3);
  _swig_go_result = result; 
  free(arg2); 
  free(arg3); 
  return _swig_go_result;
}


bool _wrap_DTLSICETransport_AddOutgoingSourceGroup_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, RTPOutgoingSourceGroup *_swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  RTPOutgoingSourceGroup *arg2 = (RTPOutgoingSourceGroup *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(RTPOutgoingSourceGroup **)&_swig_go_1; 
  
  result = (bool)(arg1)->AddOutgoingSourceGroup(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_DTLSICETransport_RemoveOutgoingSourceGroup_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, RTPOutgoingSourceGroup *_swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  RTPOutgoingSourceGroup *arg2 = (RTPOutgoingSourceGroup *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(RTPOutgoingSourceGroup **)&_swig_go_1; 
  
  result = (bool)(arg1)->RemoveOutgoingSourceGroup(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_DTLSICETransport_AddIncomingSourceGroup_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, RTPIncomingSourceGroup *_swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  RTPIncomingSourceGroup *arg2 = (RTPIncomingSourceGroup *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(RTPIncomingSourceGroup **)&_swig_go_1; 
  
  result = (bool)(arg1)->AddIncomingSourceGroup(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_DTLSICETransport_RemoveIncomingSourceGroup_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, RTPIncomingSourceGroup *_swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  RTPIncomingSourceGroup *arg2 = (RTPIncomingSourceGroup *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(RTPIncomingSourceGroup **)&_swig_go_1; 
  
  result = (bool)(arg1)->RemoveIncomingSourceGroup(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_DTLSICETransport_SetBandwidthProbing_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, bool _swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  bool arg2 ;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  (arg1)->SetBandwidthProbing(arg2);
  
}


void _wrap_DTLSICETransport_SetMaxProbingBitrate_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, intgo _swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  (arg1)->SetMaxProbingBitrate(arg2);
  
}


void _wrap_DTLSICETransport_SetSenderSideEstimatorListener_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, RemoteRateEstimator::Listener *_swig_go_1) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  RemoteRateEstimator::Listener *arg2 = (RemoteRateEstimator::Listener *) 0 ;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(RemoteRateEstimator::Listener **)&_swig_go_1; 
  
  (arg1)->SetSenderSideEstimatorListener(arg2);
  
}


_gostring_ _wrap_DTLSICETransport_GetRemoteUsername_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  result = (char *)((DTLSICETransport const *)arg1)->GetRemoteUsername();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_DTLSICETransport_GetRemotePwd_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  result = (char *)((DTLSICETransport const *)arg1)->GetRemotePwd();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_DTLSICETransport_GetLocalUsername_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  result = (char *)((DTLSICETransport const *)arg1)->GetLocalUsername();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


_gostring_ _wrap_DTLSICETransport_GetLocalPwd_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  result = (char *)((DTLSICETransport const *)arg1)->GetLocalPwd();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_DTLSICETransport_onDTLSSetup_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, DTLSConnection::Suite *_swig_go_1, char *_swig_go_2, intgo _swig_go_3, char *_swig_go_4, intgo _swig_go_5) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  DTLSConnection::Suite arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  uint32_t arg4 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  uint32_t arg6 ;
  DTLSConnection::Suite *argp2 ;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  argp2 = (DTLSConnection::Suite *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null DTLSConnection::Suite");
  }
  arg2 = (DTLSConnection::Suite)*argp2;
  
  arg3 = *(uint8_t **)&_swig_go_2; 
  arg4 = (uint32_t)_swig_go_3; 
  arg5 = *(uint8_t **)&_swig_go_4; 
  arg6 = (uint32_t)_swig_go_5; 
  
  (arg1)->onDTLSSetup(arg2,arg3,arg4,arg5,arg6);
  
}


intgo _wrap_DTLSICETransport_onData_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0, ICERemoteCandidate *_swig_go_1, char *_swig_go_2, intgo _swig_go_3) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  ICERemoteCandidate *arg2 = (ICERemoteCandidate *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  uint32_t arg4 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  arg2 = *(ICERemoteCandidate **)&_swig_go_1; 
  arg3 = *(uint8_t **)&_swig_go_2; 
  arg4 = (uint32_t)_swig_go_3; 
  
  result = (int)(arg1)->onData((ICERemoteCandidate const *)arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_DTLSICETransport_GetRTT_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  result = (uint32_t)((DTLSICETransport const *)arg1)->GetRTT();
  _swig_go_result = result; 
  return _swig_go_result;
}


RTPBundleTransport *_wrap_new_RTPBundleTransport_mediaserver_3513984b9ef493bf() {
  RTPBundleTransport *result = 0 ;
  RTPBundleTransport *_swig_go_result;
  
  
  result = (RTPBundleTransport *)new RTPBundleTransport();
  *(RTPBundleTransport **)&_swig_go_result = (RTPBundleTransport *)result; 
  return _swig_go_result;
}


void _wrap_delete_RTPBundleTransport_mediaserver_3513984b9ef493bf(RTPBundleTransport *_swig_go_0) {
  RTPBundleTransport *arg1 = (RTPBundleTransport *) 0 ;
  
  arg1 = *(RTPBundleTransport **)&_swig_go_0; 
  
  delete arg1;
  
}


intgo _wrap_RTPBundleTransport_Init__SWIG_0_mediaserver_3513984b9ef493bf(RTPBundleTransport *_swig_go_0) {
  RTPBundleTransport *arg1 = (RTPBundleTransport *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPBundleTransport **)&_swig_go_0; 
  
  result = (int)(arg1)->Init();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RTPBundleTransport_Init__SWIG_1_mediaserver_3513984b9ef493bf(RTPBundleTransport *_swig_go_0, intgo _swig_go_1) {
  RTPBundleTransport *arg1 = (RTPBundleTransport *) 0 ;
  int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPBundleTransport **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (int)(arg1)->Init(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


DTLSICETransport *_wrap_RTPBundleTransport_AddICETransport_mediaserver_3513984b9ef493bf(RTPBundleTransport *_swig_go_0, std::string *_swig_go_1, Properties *_swig_go_2) {
  RTPBundleTransport *arg1 = (RTPBundleTransport *) 0 ;
  std::string *arg2 = 0 ;
  Properties *arg3 = 0 ;
  DTLSICETransport *result = 0 ;
  DTLSICETransport *_swig_go_result;
  
  arg1 = *(RTPBundleTransport **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  arg3 = *(Properties **)&_swig_go_2; 
  
  result = (DTLSICETransport *)(arg1)->AddICETransport((std::string const &)*arg2,(Properties const &)*arg3);
  *(DTLSICETransport **)&_swig_go_result = (DTLSICETransport *)result; 
  return _swig_go_result;
}


intgo _wrap_RTPBundleTransport_RemoveICETransport_mediaserver_3513984b9ef493bf(RTPBundleTransport *_swig_go_0, std::string *_swig_go_1) {
  RTPBundleTransport *arg1 = (RTPBundleTransport *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPBundleTransport **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  result = (int)(arg1)->RemoveICETransport((std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RTPBundleTransport_End_mediaserver_3513984b9ef493bf(RTPBundleTransport *_swig_go_0) {
  RTPBundleTransport *arg1 = (RTPBundleTransport *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPBundleTransport **)&_swig_go_0; 
  
  result = (int)(arg1)->End();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RTPBundleTransport_GetLocalPort_mediaserver_3513984b9ef493bf(RTPBundleTransport *_swig_go_0) {
  RTPBundleTransport *arg1 = (RTPBundleTransport *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPBundleTransport **)&_swig_go_0; 
  
  result = (int)((RTPBundleTransport const *)arg1)->GetLocalPort();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RTPBundleTransport_AddRemoteCandidate_mediaserver_3513984b9ef493bf(RTPBundleTransport *_swig_go_0, std::string *_swig_go_1, _gostring_ _swig_go_2, short _swig_go_3) {
  RTPBundleTransport *arg1 = (RTPBundleTransport *) 0 ;
  std::string *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  uint16_t arg4 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPBundleTransport **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  arg4 = (uint16_t)_swig_go_3; 
  
  result = (int)(arg1)->AddRemoteCandidate((std::string const &)*arg2,(char const *)arg3,arg4);
  _swig_go_result = result; 
  free(arg3); 
  return _swig_go_result;
}


intgo _wrap_RTPBundleTransport_Send_mediaserver_3513984b9ef493bf(RTPBundleTransport *_swig_go_0, ICERemoteCandidate *_swig_go_1, char *_swig_go_2, intgo _swig_go_3) {
  RTPBundleTransport *arg1 = (RTPBundleTransport *) 0 ;
  ICERemoteCandidate *arg2 = (ICERemoteCandidate *) 0 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  uint32_t arg4 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPBundleTransport **)&_swig_go_0; 
  arg2 = *(ICERemoteCandidate **)&_swig_go_1; 
  arg3 = *(uint8_t **)&_swig_go_2; 
  arg4 = (uint32_t)_swig_go_3; 
  
  result = (int)(arg1)->Send((ICERemoteCandidate const *)arg2,(uint8_t const *)arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


PCAPTransportEmulator *_wrap_new_PCAPTransportEmulator_mediaserver_3513984b9ef493bf() {
  PCAPTransportEmulator *result = 0 ;
  PCAPTransportEmulator *_swig_go_result;
  
  
  result = (PCAPTransportEmulator *)new PCAPTransportEmulator();
  *(PCAPTransportEmulator **)&_swig_go_result = (PCAPTransportEmulator *)result; 
  return _swig_go_result;
}


void _wrap_delete_PCAPTransportEmulator_mediaserver_3513984b9ef493bf(PCAPTransportEmulator *_swig_go_0) {
  PCAPTransportEmulator *arg1 = (PCAPTransportEmulator *) 0 ;
  
  arg1 = *(PCAPTransportEmulator **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_PCAPTransportEmulator_SetRemoteProperties_mediaserver_3513984b9ef493bf(PCAPTransportEmulator *_swig_go_0, Properties *_swig_go_1) {
  PCAPTransportEmulator *arg1 = (PCAPTransportEmulator *) 0 ;
  Properties *arg2 = 0 ;
  
  arg1 = *(PCAPTransportEmulator **)&_swig_go_0; 
  arg2 = *(Properties **)&_swig_go_1; 
  
  (arg1)->SetRemoteProperties((Properties const &)*arg2);
  
}


bool _wrap_PCAPTransportEmulator_AddIncomingSourceGroup_mediaserver_3513984b9ef493bf(PCAPTransportEmulator *_swig_go_0, RTPIncomingSourceGroup *_swig_go_1) {
  PCAPTransportEmulator *arg1 = (PCAPTransportEmulator *) 0 ;
  RTPIncomingSourceGroup *arg2 = (RTPIncomingSourceGroup *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(PCAPTransportEmulator **)&_swig_go_0; 
  arg2 = *(RTPIncomingSourceGroup **)&_swig_go_1; 
  
  result = (bool)(arg1)->AddIncomingSourceGroup(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_PCAPTransportEmulator_RemoveIncomingSourceGroup_mediaserver_3513984b9ef493bf(PCAPTransportEmulator *_swig_go_0, RTPIncomingSourceGroup *_swig_go_1) {
  PCAPTransportEmulator *arg1 = (PCAPTransportEmulator *) 0 ;
  RTPIncomingSourceGroup *arg2 = (RTPIncomingSourceGroup *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(PCAPTransportEmulator **)&_swig_go_0; 
  arg2 = *(RTPIncomingSourceGroup **)&_swig_go_1; 
  
  result = (bool)(arg1)->RemoveIncomingSourceGroup(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_PCAPTransportEmulator_Open_mediaserver_3513984b9ef493bf(PCAPTransportEmulator *_swig_go_0, _gostring_ _swig_go_1) {
  PCAPTransportEmulator *arg1 = (PCAPTransportEmulator *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(PCAPTransportEmulator **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (bool)(arg1)->Open((char const *)arg2);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


bool _wrap_PCAPTransportEmulator_Play_mediaserver_3513984b9ef493bf(PCAPTransportEmulator *_swig_go_0) {
  PCAPTransportEmulator *arg1 = (PCAPTransportEmulator *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(PCAPTransportEmulator **)&_swig_go_0; 
  
  result = (bool)(arg1)->Play();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_PCAPTransportEmulator_Seek_mediaserver_3513984b9ef493bf(PCAPTransportEmulator *_swig_go_0, long long _swig_go_1) {
  PCAPTransportEmulator *arg1 = (PCAPTransportEmulator *) 0 ;
  uint64_t arg2 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(PCAPTransportEmulator **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  
  result = (uint64_t)(arg1)->Seek(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_PCAPTransportEmulator_Stop_mediaserver_3513984b9ef493bf(PCAPTransportEmulator *_swig_go_0) {
  PCAPTransportEmulator *arg1 = (PCAPTransportEmulator *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(PCAPTransportEmulator **)&_swig_go_0; 
  
  result = (bool)(arg1)->Stop();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_PCAPTransportEmulator_Close_mediaserver_3513984b9ef493bf(PCAPTransportEmulator *_swig_go_0) {
  PCAPTransportEmulator *arg1 = (PCAPTransportEmulator *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(PCAPTransportEmulator **)&_swig_go_0; 
  
  result = (bool)(arg1)->Close();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_PCAPTransportEmulator_SendPLI_mediaserver_3513984b9ef493bf(PCAPTransportEmulator *_swig_go_0, intgo _swig_go_1) {
  PCAPTransportEmulator *arg1 = (PCAPTransportEmulator *) 0 ;
  uint32_t arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(PCAPTransportEmulator **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  result = (int)(arg1)->SendPLI(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


mp4track *_wrap_new_mp4track_mediaserver_3513984b9ef493bf(MP4FileHandle *_swig_go_0) {
  MP4FileHandle arg1 ;
  MP4FileHandle *argp1 ;
  mp4track *result = 0 ;
  mp4track *_swig_go_result;
  
  
  argp1 = (MP4FileHandle *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null MP4FileHandle");
  }
  arg1 = (MP4FileHandle)*argp1;
  
  
  result = (mp4track *)new mp4track(arg1);
  *(mp4track **)&_swig_go_result = (mp4track *)result; 
  return _swig_go_result;
}


intgo _wrap_mp4track_CreateAudioTrack_mediaserver_3513984b9ef493bf(mp4track *_swig_go_0, AudioCodec::Type *_swig_go_1, intgo _swig_go_2) {
  mp4track *arg1 = (mp4track *) 0 ;
  AudioCodec::Type arg2 ;
  uint32_t arg3 ;
  AudioCodec::Type *argp2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(mp4track **)&_swig_go_0; 
  
  argp2 = (AudioCodec::Type *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null AudioCodec::Type");
  }
  arg2 = (AudioCodec::Type)*argp2;
  
  arg3 = (uint32_t)_swig_go_2; 
  
  result = (int)(arg1)->CreateAudioTrack(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_mp4track_CreateVideoTrack_mediaserver_3513984b9ef493bf(mp4track *_swig_go_0, VideoCodec::Type *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  mp4track *arg1 = (mp4track *) 0 ;
  VideoCodec::Type arg2 ;
  int arg3 ;
  int arg4 ;
  VideoCodec::Type *argp2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(mp4track **)&_swig_go_0; 
  
  argp2 = (VideoCodec::Type *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null VideoCodec::Type");
  }
  arg2 = (VideoCodec::Type)*argp2;
  
  arg3 = (int)_swig_go_2; 
  arg4 = (int)_swig_go_3; 
  
  result = (int)(arg1)->CreateVideoTrack(arg2,arg3,arg4);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_mp4track_CreateTextTrack_mediaserver_3513984b9ef493bf(mp4track *_swig_go_0) {
  mp4track *arg1 = (mp4track *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(mp4track **)&_swig_go_0; 
  
  result = (int)(arg1)->CreateTextTrack();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_mp4track_WriteAudioFrame_mediaserver_3513984b9ef493bf(mp4track *_swig_go_0, AudioFrame *_swig_go_1) {
  mp4track *arg1 = (mp4track *) 0 ;
  AudioFrame *arg2 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(mp4track **)&_swig_go_0; 
  arg2 = *(AudioFrame **)&_swig_go_1; 
  
  result = (int)(arg1)->WriteAudioFrame(*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_mp4track_WriteVideoFrame_mediaserver_3513984b9ef493bf(mp4track *_swig_go_0, VideoFrame *_swig_go_1) {
  mp4track *arg1 = (mp4track *) 0 ;
  VideoFrame *arg2 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(mp4track **)&_swig_go_0; 
  arg2 = *(VideoFrame **)&_swig_go_1; 
  
  result = (int)(arg1)->WriteVideoFrame(*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_mp4track_WriteTextFrame_mediaserver_3513984b9ef493bf(mp4track *_swig_go_0, TextFrame *_swig_go_1) {
  mp4track *arg1 = (mp4track *) 0 ;
  TextFrame *arg2 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(mp4track **)&_swig_go_0; 
  arg2 = *(TextFrame **)&_swig_go_1; 
  
  result = (int)(arg1)->WriteTextFrame(*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_mp4track_Close_mediaserver_3513984b9ef493bf(mp4track *_swig_go_0) {
  mp4track *arg1 = (mp4track *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(mp4track **)&_swig_go_0; 
  
  result = (int)(arg1)->Close();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_mp4track_mediaserver_3513984b9ef493bf(mp4track *_swig_go_0) {
  mp4track *arg1 = (mp4track *) 0 ;
  
  arg1 = *(mp4track **)&_swig_go_0; 
  
  delete arg1;
  
}


MP4Recorder *_wrap_new_MP4Recorder_mediaserver_3513984b9ef493bf() {
  MP4Recorder *result = 0 ;
  MP4Recorder *_swig_go_result;
  
  
  result = (MP4Recorder *)new MP4Recorder();
  *(MP4Recorder **)&_swig_go_result = (MP4Recorder *)result; 
  return _swig_go_result;
}


void _wrap_delete_MP4Recorder_mediaserver_3513984b9ef493bf(MP4Recorder *_swig_go_0) {
  MP4Recorder *arg1 = (MP4Recorder *) 0 ;
  
  arg1 = *(MP4Recorder **)&_swig_go_0; 
  
  delete arg1;
  
}


bool _wrap_MP4Recorder_Create_mediaserver_3513984b9ef493bf(MP4Recorder *_swig_go_0, _gostring_ _swig_go_1) {
  MP4Recorder *arg1 = (MP4Recorder *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(MP4Recorder **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (bool)(arg1)->Create((char const *)arg2);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


bool _wrap_MP4Recorder_Record__SWIG_0_mediaserver_3513984b9ef493bf(MP4Recorder *_swig_go_0) {
  MP4Recorder *arg1 = (MP4Recorder *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(MP4Recorder **)&_swig_go_0; 
  
  result = (bool)(arg1)->Record();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_MP4Recorder_Record__SWIG_1_mediaserver_3513984b9ef493bf(MP4Recorder *_swig_go_0, bool _swig_go_1) {
  MP4Recorder *arg1 = (MP4Recorder *) 0 ;
  bool arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(MP4Recorder **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  result = (bool)(arg1)->Record(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_MP4Recorder_Stop_mediaserver_3513984b9ef493bf(MP4Recorder *_swig_go_0) {
  MP4Recorder *arg1 = (MP4Recorder *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(MP4Recorder **)&_swig_go_0; 
  
  result = (bool)(arg1)->Stop();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_MP4Recorder_Close__SWIG_0_mediaserver_3513984b9ef493bf(MP4Recorder *_swig_go_0) {
  MP4Recorder *arg1 = (MP4Recorder *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(MP4Recorder **)&_swig_go_0; 
  
  result = (bool)(arg1)->Close();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_MP4Recorder_Close__SWIG_1_mediaserver_3513984b9ef493bf(MP4Recorder *_swig_go_0, bool _swig_go_1) {
  MP4Recorder *arg1 = (MP4Recorder *) 0 ;
  bool arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(MP4Recorder **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  result = (bool)(arg1)->Close(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


RecorderControl::Type *_wrap_MP4Recorder_GetType_mediaserver_3513984b9ef493bf(MP4Recorder *_swig_go_0) {
  MP4Recorder *arg1 = (MP4Recorder *) 0 ;
  RecorderControl::Type result;
  RecorderControl::Type *_swig_go_result;
  
  arg1 = *(MP4Recorder **)&_swig_go_0; 
  
  result = (arg1)->GetType();
  *(RecorderControl::Type **)&_swig_go_result = new RecorderControl::Type(result); 
  return _swig_go_result;
}


void _wrap_MP4Recorder_onMediaFrame__SWIG_0_mediaserver_3513984b9ef493bf(MP4Recorder *_swig_go_0, MediaFrame *_swig_go_1) {
  MP4Recorder *arg1 = (MP4Recorder *) 0 ;
  MediaFrame *arg2 = 0 ;
  
  arg1 = *(MP4Recorder **)&_swig_go_0; 
  arg2 = *(MediaFrame **)&_swig_go_1; 
  
  (arg1)->onMediaFrame(*arg2);
  
}


void _wrap_MP4Recorder_onMediaFrame__SWIG_1_mediaserver_3513984b9ef493bf(MP4Recorder *_swig_go_0, intgo _swig_go_1, MediaFrame *_swig_go_2) {
  MP4Recorder *arg1 = (MP4Recorder *) 0 ;
  uint32_t arg2 ;
  MediaFrame *arg3 = 0 ;
  
  arg1 = *(MP4Recorder **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  arg3 = *(MediaFrame **)&_swig_go_2; 
  
  (arg1)->onMediaFrame(arg2,*arg3);
  
}


void _wrap_MP4Recorder_onMediaFrame__SWIG_2_mediaserver_3513984b9ef493bf(MP4Recorder *_swig_go_0, intgo _swig_go_1, MediaFrame *_swig_go_2, long long _swig_go_3) {
  MP4Recorder *arg1 = (MP4Recorder *) 0 ;
  uint32_t arg2 ;
  MediaFrame *arg3 = 0 ;
  uint64_t arg4 ;
  
  arg1 = *(MP4Recorder **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  arg3 = *(MediaFrame **)&_swig_go_2; 
  arg4 = (uint64_t)_swig_go_3; 
  
  (arg1)->onMediaFrame(arg2,*arg3,arg4);
  
}


RTPStreamTransponder *_wrap_new_RTPStreamTransponder_mediaserver_3513984b9ef493bf(RTPOutgoingSourceGroup *_swig_go_0, RTPSender *_swig_go_1) {
  RTPOutgoingSourceGroup *arg1 = (RTPOutgoingSourceGroup *) 0 ;
  RTPSender *arg2 = (RTPSender *) 0 ;
  RTPStreamTransponder *result = 0 ;
  RTPStreamTransponder *_swig_go_result;
  
  arg1 = *(RTPOutgoingSourceGroup **)&_swig_go_0; 
  arg2 = *(RTPSender **)&_swig_go_1; 
  
  result = (RTPStreamTransponder *)new RTPStreamTransponder(arg1,arg2);
  *(RTPStreamTransponder **)&_swig_go_result = (RTPStreamTransponder *)result; 
  return _swig_go_result;
}


void _wrap_delete_RTPStreamTransponder_mediaserver_3513984b9ef493bf(RTPStreamTransponder *_swig_go_0) {
  RTPStreamTransponder *arg1 = (RTPStreamTransponder *) 0 ;
  
  arg1 = *(RTPStreamTransponder **)&_swig_go_0; 
  
  delete arg1;
  
}


bool _wrap_RTPStreamTransponder_SetIncoming_mediaserver_3513984b9ef493bf(RTPStreamTransponder *_swig_go_0, RTPIncomingSourceGroup *_swig_go_1, RTPReceiver *_swig_go_2) {
  RTPStreamTransponder *arg1 = (RTPStreamTransponder *) 0 ;
  RTPIncomingSourceGroup *arg2 = (RTPIncomingSourceGroup *) 0 ;
  RTPReceiver *arg3 = (RTPReceiver *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RTPStreamTransponder **)&_swig_go_0; 
  arg2 = *(RTPIncomingSourceGroup **)&_swig_go_1; 
  arg3 = *(RTPReceiver **)&_swig_go_2; 
  
  result = (bool)(arg1)->SetIncoming(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPStreamTransponder_Close_mediaserver_3513984b9ef493bf(RTPStreamTransponder *_swig_go_0) {
  RTPStreamTransponder *arg1 = (RTPStreamTransponder *) 0 ;
  
  arg1 = *(RTPStreamTransponder **)&_swig_go_0; 
  
  (arg1)->Close();
  
}


void _wrap_RTPStreamTransponder_onRTP_mediaserver_3513984b9ef493bf(RTPStreamTransponder *_swig_go_0, RTPIncomingSourceGroup *_swig_go_1, RTPPacket::shared *_swig_go_2) {
  RTPStreamTransponder *arg1 = (RTPStreamTransponder *) 0 ;
  RTPIncomingSourceGroup *arg2 = (RTPIncomingSourceGroup *) 0 ;
  RTPPacket::shared *arg3 = 0 ;
  
  arg1 = *(RTPStreamTransponder **)&_swig_go_0; 
  arg2 = *(RTPIncomingSourceGroup **)&_swig_go_1; 
  arg3 = *(RTPPacket::shared **)&_swig_go_2; 
  
  (arg1)->onRTP(arg2,(RTPPacket::shared const &)*arg3);
  
}


void _wrap_RTPStreamTransponder_onEnded_mediaserver_3513984b9ef493bf(RTPStreamTransponder *_swig_go_0, RTPIncomingSourceGroup *_swig_go_1) {
  RTPStreamTransponder *arg1 = (RTPStreamTransponder *) 0 ;
  RTPIncomingSourceGroup *arg2 = (RTPIncomingSourceGroup *) 0 ;
  
  arg1 = *(RTPStreamTransponder **)&_swig_go_0; 
  arg2 = *(RTPIncomingSourceGroup **)&_swig_go_1; 
  
  (arg1)->onEnded(arg2);
  
}


void _wrap_RTPStreamTransponder_onPLIRequest_mediaserver_3513984b9ef493bf(RTPStreamTransponder *_swig_go_0, RTPOutgoingSourceGroup *_swig_go_1, intgo _swig_go_2) {
  RTPStreamTransponder *arg1 = (RTPStreamTransponder *) 0 ;
  RTPOutgoingSourceGroup *arg2 = (RTPOutgoingSourceGroup *) 0 ;
  uint32_t arg3 ;
  
  arg1 = *(RTPStreamTransponder **)&_swig_go_0; 
  arg2 = *(RTPOutgoingSourceGroup **)&_swig_go_1; 
  arg3 = (uint32_t)_swig_go_2; 
  
  (arg1)->onPLIRequest(arg2,arg3);
  
}


void _wrap_RTPStreamTransponder_onREMB_mediaserver_3513984b9ef493bf(RTPStreamTransponder *_swig_go_0, RTPOutgoingSourceGroup *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  RTPStreamTransponder *arg1 = (RTPStreamTransponder *) 0 ;
  RTPOutgoingSourceGroup *arg2 = (RTPOutgoingSourceGroup *) 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  
  arg1 = *(RTPStreamTransponder **)&_swig_go_0; 
  arg2 = *(RTPOutgoingSourceGroup **)&_swig_go_1; 
  arg3 = (uint32_t)_swig_go_2; 
  arg4 = (uint32_t)_swig_go_3; 
  
  (arg1)->onREMB(arg2,arg3,arg4);
  
}


void _wrap_RTPStreamTransponder_SelectLayer_mediaserver_3513984b9ef493bf(RTPStreamTransponder *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  RTPStreamTransponder *arg1 = (RTPStreamTransponder *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(RTPStreamTransponder **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  (arg1)->SelectLayer(arg2,arg3);
  
}


void _wrap_RTPStreamTransponder_Mute_mediaserver_3513984b9ef493bf(RTPStreamTransponder *_swig_go_0, bool _swig_go_1) {
  RTPStreamTransponder *arg1 = (RTPStreamTransponder *) 0 ;
  bool arg2 ;
  
  arg1 = *(RTPStreamTransponder **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  (arg1)->Mute(arg2);
  
}


void _wrap_LayerInfo_MaxLayerId_set_mediaserver_3513984b9ef493bf(char _swig_go_0) {
  uint8_t arg1 ;
  
  arg1 = (uint8_t)_swig_go_0; 
  
  LayerInfo::MaxLayerId = arg1;
  
}


char _wrap_LayerInfo_MaxLayerId_get_mediaserver_3513984b9ef493bf() {
  uint8_t result;
  char _swig_go_result;
  
  
  result = (uint8_t)LayerInfo::MaxLayerId;
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_LayerInfo_temporalLayerId_set_mediaserver_3513984b9ef493bf(LayerInfo *_swig_go_0, char _swig_go_1) {
  LayerInfo *arg1 = (LayerInfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = *(LayerInfo **)&_swig_go_0; 
  arg2 = (uint8_t)_swig_go_1; 
  
  if (arg1) (arg1)->temporalLayerId = arg2;
  
}


char _wrap_LayerInfo_temporalLayerId_get_mediaserver_3513984b9ef493bf(LayerInfo *_swig_go_0) {
  LayerInfo *arg1 = (LayerInfo *) 0 ;
  uint8_t result;
  char _swig_go_result;
  
  arg1 = *(LayerInfo **)&_swig_go_0; 
  
  result = (uint8_t) ((arg1)->temporalLayerId);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_LayerInfo_spatialLayerId_set_mediaserver_3513984b9ef493bf(LayerInfo *_swig_go_0, char _swig_go_1) {
  LayerInfo *arg1 = (LayerInfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = *(LayerInfo **)&_swig_go_0; 
  arg2 = (uint8_t)_swig_go_1; 
  
  if (arg1) (arg1)->spatialLayerId = arg2;
  
}


char _wrap_LayerInfo_spatialLayerId_get_mediaserver_3513984b9ef493bf(LayerInfo *_swig_go_0) {
  LayerInfo *arg1 = (LayerInfo *) 0 ;
  uint8_t result;
  char _swig_go_result;
  
  arg1 = *(LayerInfo **)&_swig_go_0; 
  
  result = (uint8_t) ((arg1)->spatialLayerId);
  _swig_go_result = result; 
  return _swig_go_result;
}


LayerInfo *_wrap_new_LayerInfo_mediaserver_3513984b9ef493bf() {
  LayerInfo *result = 0 ;
  LayerInfo *_swig_go_result;
  
  
  result = (LayerInfo *)new LayerInfo();
  *(LayerInfo **)&_swig_go_result = (LayerInfo *)result; 
  return _swig_go_result;
}


void _wrap_delete_LayerInfo_mediaserver_3513984b9ef493bf(LayerInfo *_swig_go_0) {
  LayerInfo *arg1 = (LayerInfo *) 0 ;
  
  arg1 = *(LayerInfo **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_LayerSource_numPackets_set_mediaserver_3513984b9ef493bf(LayerSource *_swig_go_0, intgo _swig_go_1) {
  LayerSource *arg1 = (LayerSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(LayerSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->numPackets = arg2;
  
}


intgo _wrap_LayerSource_numPackets_get_mediaserver_3513984b9ef493bf(LayerSource *_swig_go_0) {
  LayerSource *arg1 = (LayerSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(LayerSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->numPackets);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_LayerSource_totalBytes_set_mediaserver_3513984b9ef493bf(LayerSource *_swig_go_0, intgo _swig_go_1) {
  LayerSource *arg1 = (LayerSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(LayerSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->totalBytes = arg2;
  
}


intgo _wrap_LayerSource_totalBytes_get_mediaserver_3513984b9ef493bf(LayerSource *_swig_go_0) {
  LayerSource *arg1 = (LayerSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(LayerSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->totalBytes);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_LayerSource_bitrate_set_mediaserver_3513984b9ef493bf(LayerSource *_swig_go_0, intgo _swig_go_1) {
  LayerSource *arg1 = (LayerSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(LayerSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->bitrate = arg2;
  
}


intgo _wrap_LayerSource_bitrate_get_mediaserver_3513984b9ef493bf(LayerSource *_swig_go_0) {
  LayerSource *arg1 = (LayerSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(LayerSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->bitrate);
  _swig_go_result = result; 
  return _swig_go_result;
}


LayerSource *_wrap_new_LayerSource_mediaserver_3513984b9ef493bf() {
  LayerSource *result = 0 ;
  LayerSource *_swig_go_result;
  
  
  result = (LayerSource *)new LayerSource();
  *(LayerSource **)&_swig_go_result = (LayerSource *)result; 
  return _swig_go_result;
}


void _wrap_delete_LayerSource_mediaserver_3513984b9ef493bf(LayerSource *_swig_go_0) {
  LayerSource *arg1 = (LayerSource *) 0 ;
  
  arg1 = *(LayerSource **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_SetLayerSource_TemporalLayerId_mediaserver_3513984b9ef493bf(LayerSource *_swig_go_0, char _swig_go_1) {
  LayerSource *arg1 = (LayerSource *) 0 ;
  uint8_t arg2 ;
  
  arg1 = *(LayerSource **)&_swig_go_0; 
  arg2 = (uint8_t)_swig_go_1; 
  
  LayerInfo *swig_b0 = (LayerInfo *)arg1;
  if (swig_b0) (swig_b0)->temporalLayerId = arg2;
  
}


char _wrap_GetLayerSource_TemporalLayerId_mediaserver_3513984b9ef493bf(LayerSource *_swig_go_0) {
  LayerSource *arg1 = (LayerSource *) 0 ;
  uint8_t result;
  char _swig_go_result;
  
  arg1 = *(LayerSource **)&_swig_go_0; 
  
  LayerInfo *swig_b0 = (LayerInfo *)arg1;
  result = (uint8_t) ((swig_b0)->temporalLayerId);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetLayerSource_SpatialLayerId_mediaserver_3513984b9ef493bf(LayerSource *_swig_go_0, char _swig_go_1) {
  LayerSource *arg1 = (LayerSource *) 0 ;
  uint8_t arg2 ;
  
  arg1 = *(LayerSource **)&_swig_go_0; 
  arg2 = (uint8_t)_swig_go_1; 
  
  LayerInfo *swig_b0 = (LayerInfo *)arg1;
  if (swig_b0) (swig_b0)->spatialLayerId = arg2;
  
}


char _wrap_GetLayerSource_SpatialLayerId_mediaserver_3513984b9ef493bf(LayerSource *_swig_go_0) {
  LayerSource *arg1 = (LayerSource *) 0 ;
  uint8_t result;
  char _swig_go_result;
  
  arg1 = *(LayerSource **)&_swig_go_0; 
  
  LayerInfo *swig_b0 = (LayerInfo *)arg1;
  result = (uint8_t) ((swig_b0)->spatialLayerId);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_LayerSources_size_mediaserver_3513984b9ef493bf(LayerSources *_swig_go_0) {
  LayerSources *arg1 = (LayerSources *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(LayerSources **)&_swig_go_0; 
  
  result = ((LayerSources const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


LayerSource *_wrap_LayerSources_get_mediaserver_3513984b9ef493bf(LayerSources *_swig_go_0, long long _swig_go_1) {
  LayerSources *arg1 = (LayerSources *) 0 ;
  size_t arg2 ;
  LayerSource *result = 0 ;
  LayerSource *_swig_go_result;
  
  arg1 = *(LayerSources **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  result = (LayerSource *)(arg1)->get(arg2);
  *(LayerSource **)&_swig_go_result = (LayerSource *)result; 
  return _swig_go_result;
}


LayerSources *_wrap_new_LayerSources_mediaserver_3513984b9ef493bf() {
  LayerSources *result = 0 ;
  LayerSources *_swig_go_result;
  
  
  result = (LayerSources *)new LayerSources();
  *(LayerSources **)&_swig_go_result = (LayerSources *)result; 
  return _swig_go_result;
}


void _wrap_delete_LayerSources_mediaserver_3513984b9ef493bf(LayerSources *_swig_go_0) {
  LayerSources *arg1 = (LayerSources *) 0 ;
  
  arg1 = *(LayerSources **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_RTPSource_ssrc_set_mediaserver_3513984b9ef493bf(RTPSource *_swig_go_0, intgo _swig_go_1) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->ssrc = arg2;
  
}


intgo _wrap_RTPSource_ssrc_get_mediaserver_3513984b9ef493bf(RTPSource *_swig_go_0) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->ssrc);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPSource_extSeqNum_set_mediaserver_3513984b9ef493bf(RTPSource *_swig_go_0, intgo _swig_go_1) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->extSeqNum = arg2;
  
}


intgo _wrap_RTPSource_extSeqNum_get_mediaserver_3513984b9ef493bf(RTPSource *_swig_go_0) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->extSeqNum);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPSource_cycles_set_mediaserver_3513984b9ef493bf(RTPSource *_swig_go_0, intgo _swig_go_1) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->cycles = arg2;
  
}


intgo _wrap_RTPSource_cycles_get_mediaserver_3513984b9ef493bf(RTPSource *_swig_go_0) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->cycles);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPSource_jitter_set_mediaserver_3513984b9ef493bf(RTPSource *_swig_go_0, intgo _swig_go_1) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->jitter = arg2;
  
}


intgo _wrap_RTPSource_jitter_get_mediaserver_3513984b9ef493bf(RTPSource *_swig_go_0) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->jitter);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPSource_numPackets_set_mediaserver_3513984b9ef493bf(RTPSource *_swig_go_0, intgo _swig_go_1) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->numPackets = arg2;
  
}


intgo _wrap_RTPSource_numPackets_get_mediaserver_3513984b9ef493bf(RTPSource *_swig_go_0) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->numPackets);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPSource_numRTCPPackets_set_mediaserver_3513984b9ef493bf(RTPSource *_swig_go_0, intgo _swig_go_1) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->numRTCPPackets = arg2;
  
}


intgo _wrap_RTPSource_numRTCPPackets_get_mediaserver_3513984b9ef493bf(RTPSource *_swig_go_0) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->numRTCPPackets);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPSource_totalBytes_set_mediaserver_3513984b9ef493bf(RTPSource *_swig_go_0, intgo _swig_go_1) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->totalBytes = arg2;
  
}


intgo _wrap_RTPSource_totalBytes_get_mediaserver_3513984b9ef493bf(RTPSource *_swig_go_0) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->totalBytes);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPSource_totalRTCPBytes_set_mediaserver_3513984b9ef493bf(RTPSource *_swig_go_0, intgo _swig_go_1) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->totalRTCPBytes = arg2;
  
}


intgo _wrap_RTPSource_totalRTCPBytes_get_mediaserver_3513984b9ef493bf(RTPSource *_swig_go_0) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->totalRTCPBytes);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPSource_bitrate_set_mediaserver_3513984b9ef493bf(RTPSource *_swig_go_0, intgo _swig_go_1) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->bitrate = arg2;
  
}


intgo _wrap_RTPSource_bitrate_get_mediaserver_3513984b9ef493bf(RTPSource *_swig_go_0) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->bitrate);
  _swig_go_result = result; 
  return _swig_go_result;
}


RTPSource *_wrap_new_RTPSource_mediaserver_3513984b9ef493bf() {
  RTPSource *result = 0 ;
  RTPSource *_swig_go_result;
  
  
  result = (RTPSource *)new RTPSource();
  *(RTPSource **)&_swig_go_result = (RTPSource *)result; 
  return _swig_go_result;
}


void _wrap_delete_RTPSource_mediaserver_3513984b9ef493bf(RTPSource *_swig_go_0) {
  RTPSource *arg1 = (RTPSource *) 0 ;
  
  arg1 = *(RTPSource **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_RTPIncomingSource_lostPackets_set_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->lostPackets = arg2;
  
}


intgo _wrap_RTPIncomingSource_lostPackets_get_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->lostPackets);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSource_dropPackets_set_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->dropPackets = arg2;
  
}


intgo _wrap_RTPIncomingSource_dropPackets_get_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->dropPackets);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSource_totalPacketsSinceLastSR_set_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->totalPacketsSinceLastSR = arg2;
  
}


intgo _wrap_RTPIncomingSource_totalPacketsSinceLastSR_get_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->totalPacketsSinceLastSR);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSource_totalBytesSinceLastSR_set_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->totalBytesSinceLastSR = arg2;
  
}


intgo _wrap_RTPIncomingSource_totalBytesSinceLastSR_get_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->totalBytesSinceLastSR);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSource_minExtSeqNumSinceLastSR_set_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->minExtSeqNumSinceLastSR = arg2;
  
}


intgo _wrap_RTPIncomingSource_minExtSeqNumSinceLastSR_get_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->minExtSeqNumSinceLastSR);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSource_lostPacketsSinceLastSR_set_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->lostPacketsSinceLastSR = arg2;
  
}


intgo _wrap_RTPIncomingSource_lostPacketsSinceLastSR_get_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->lostPacketsSinceLastSR);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSource_lastReceivedSenderNTPTimestamp_set_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0, long long _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint64_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  
  if (arg1) (arg1)->lastReceivedSenderNTPTimestamp = arg2;
  
}


long long _wrap_RTPIncomingSource_lastReceivedSenderNTPTimestamp_get_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint64_t) ((arg1)->lastReceivedSenderNTPTimestamp);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSource_lastReceivedSenderReport_set_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0, long long _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint64_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  
  if (arg1) (arg1)->lastReceivedSenderReport = arg2;
  
}


long long _wrap_RTPIncomingSource_lastReceivedSenderReport_get_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint64_t) ((arg1)->lastReceivedSenderReport);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSource_lastReport_set_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0, long long _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint64_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  
  if (arg1) (arg1)->lastReport = arg2;
  
}


long long _wrap_RTPIncomingSource_lastReport_get_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint64_t) ((arg1)->lastReport);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSource_lastPLI_set_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0, long long _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint64_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  
  if (arg1) (arg1)->lastPLI = arg2;
  
}


long long _wrap_RTPIncomingSource_lastPLI_get_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint64_t) ((arg1)->lastPLI);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSource_totalPLIs_set_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->totalPLIs = arg2;
  
}


intgo _wrap_RTPIncomingSource_totalPLIs_get_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->totalPLIs);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSource_totalNACKs_set_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->totalNACKs = arg2;
  
}


intgo _wrap_RTPIncomingSource_totalNACKs_get_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->totalNACKs);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSource_lastNACKed_set_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0, long long _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint64_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  
  if (arg1) (arg1)->lastNACKed = arg2;
  
}


long long _wrap_RTPIncomingSource_lastNACKed_get_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = (uint64_t) ((arg1)->lastNACKed);
  _swig_go_result = result; 
  return _swig_go_result;
}


LayerSources *_wrap_RTPIncomingSource_layers_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  LayerSources result;
  LayerSources *_swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  result = RTPIncomingSource_layers(arg1);
  *(LayerSources **)&_swig_go_result = new LayerSources(result); 
  return _swig_go_result;
}


RTPIncomingSource *_wrap_new_RTPIncomingSource_mediaserver_3513984b9ef493bf() {
  RTPIncomingSource *result = 0 ;
  RTPIncomingSource *_swig_go_result;
  
  
  result = (RTPIncomingSource *)new RTPIncomingSource();
  *(RTPIncomingSource **)&_swig_go_result = (RTPIncomingSource *)result; 
  return _swig_go_result;
}


void _wrap_delete_RTPIncomingSource_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_SetRTPIncomingSource_Ssrc_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->ssrc = arg2;
  
}


intgo _wrap_GetRTPIncomingSource_Ssrc_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->ssrc);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetRTPIncomingSource_ExtSeqNum_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->extSeqNum = arg2;
  
}


intgo _wrap_GetRTPIncomingSource_ExtSeqNum_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->extSeqNum);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetRTPIncomingSource_Cycles_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->cycles = arg2;
  
}


intgo _wrap_GetRTPIncomingSource_Cycles_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->cycles);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetRTPIncomingSource_Jitter_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->jitter = arg2;
  
}


intgo _wrap_GetRTPIncomingSource_Jitter_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->jitter);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetRTPIncomingSource_NumPackets_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->numPackets = arg2;
  
}


intgo _wrap_GetRTPIncomingSource_NumPackets_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->numPackets);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetRTPIncomingSource_NumRTCPPackets_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->numRTCPPackets = arg2;
  
}


intgo _wrap_GetRTPIncomingSource_NumRTCPPackets_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->numRTCPPackets);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetRTPIncomingSource_TotalBytes_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->totalBytes = arg2;
  
}


intgo _wrap_GetRTPIncomingSource_TotalBytes_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->totalBytes);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetRTPIncomingSource_TotalRTCPBytes_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->totalRTCPBytes = arg2;
  
}


intgo _wrap_GetRTPIncomingSource_TotalRTCPBytes_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->totalRTCPBytes);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetRTPIncomingSource_Bitrate_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->bitrate = arg2;
  
}


intgo _wrap_GetRTPIncomingSource_Bitrate_mediaserver_3513984b9ef493bf(RTPIncomingSource *_swig_go_0) {
  RTPIncomingSource *arg1 = (RTPIncomingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->bitrate);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPOutgoingSource_time_set_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0, intgo _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->time = arg2;
  
}


intgo _wrap_RTPOutgoingSource_time_get_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->time);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPOutgoingSource_lastTime_set_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0, intgo _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->lastTime = arg2;
  
}


intgo _wrap_RTPOutgoingSource_lastTime_get_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->lastTime);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPOutgoingSource_numPackets_set_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0, intgo _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->numPackets = arg2;
  
}


intgo _wrap_RTPOutgoingSource_numPackets_get_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->numPackets);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPOutgoingSource_numRTCPPackets_set_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0, intgo _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->numRTCPPackets = arg2;
  
}


intgo _wrap_RTPOutgoingSource_numRTCPPackets_get_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->numRTCPPackets);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPOutgoingSource_totalBytes_set_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0, intgo _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->totalBytes = arg2;
  
}


intgo _wrap_RTPOutgoingSource_totalBytes_get_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->totalBytes);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPOutgoingSource_totalRTCPBytes_set_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0, intgo _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->totalRTCPBytes = arg2;
  
}


intgo _wrap_RTPOutgoingSource_totalRTCPBytes_get_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->totalRTCPBytes);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPOutgoingSource_lastSenderReport_set_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0, long long _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint64_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  
  if (arg1) (arg1)->lastSenderReport = arg2;
  
}


long long _wrap_RTPOutgoingSource_lastSenderReport_get_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  result = (uint64_t) ((arg1)->lastSenderReport);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPOutgoingSource_lastSenderReportNTP_set_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0, long long _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint64_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  
  if (arg1) (arg1)->lastSenderReportNTP = arg2;
  
}


long long _wrap_RTPOutgoingSource_lastSenderReportNTP_get_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  result = (uint64_t) ((arg1)->lastSenderReportNTP);
  _swig_go_result = result; 
  return _swig_go_result;
}


RTPOutgoingSource *_wrap_new_RTPOutgoingSource_mediaserver_3513984b9ef493bf() {
  RTPOutgoingSource *result = 0 ;
  RTPOutgoingSource *_swig_go_result;
  
  
  result = (RTPOutgoingSource *)new RTPOutgoingSource();
  *(RTPOutgoingSource **)&_swig_go_result = (RTPOutgoingSource *)result; 
  return _swig_go_result;
}


void _wrap_delete_RTPOutgoingSource_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_SetRTPOutgoingSource_Ssrc_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0, intgo _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->ssrc = arg2;
  
}


intgo _wrap_GetRTPOutgoingSource_Ssrc_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->ssrc);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetRTPOutgoingSource_ExtSeqNum_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0, intgo _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->extSeqNum = arg2;
  
}


intgo _wrap_GetRTPOutgoingSource_ExtSeqNum_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->extSeqNum);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetRTPOutgoingSource_Cycles_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0, intgo _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->cycles = arg2;
  
}


intgo _wrap_GetRTPOutgoingSource_Cycles_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->cycles);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetRTPOutgoingSource_Jitter_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0, intgo _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->jitter = arg2;
  
}


intgo _wrap_GetRTPOutgoingSource_Jitter_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->jitter);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SetRTPOutgoingSource_Bitrate_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0, intgo _swig_go_1) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  if (swig_b0) (swig_b0)->bitrate = arg2;
  
}


intgo _wrap_GetRTPOutgoingSource_Bitrate_mediaserver_3513984b9ef493bf(RTPOutgoingSource *_swig_go_0) {
  RTPOutgoingSource *arg1 = (RTPOutgoingSource *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPOutgoingSource **)&_swig_go_0; 
  
  RTPSource *swig_b0 = (RTPSource *)arg1;
  result = (uint32_t) ((swig_b0)->bitrate);
  _swig_go_result = result; 
  return _swig_go_result;
}


RTPOutgoingSourceGroup *_wrap_new_RTPOutgoingSourceGroup__SWIG_0_mediaserver_3513984b9ef493bf(intgo _swig_go_0) {
  MediaFrame::Type arg1 ;
  RTPOutgoingSourceGroup *result = 0 ;
  RTPOutgoingSourceGroup *_swig_go_result;
  
  arg1 = (MediaFrame::Type)_swig_go_0; 
  
  result = (RTPOutgoingSourceGroup *)new RTPOutgoingSourceGroup(arg1);
  *(RTPOutgoingSourceGroup **)&_swig_go_result = (RTPOutgoingSourceGroup *)result; 
  return _swig_go_result;
}


RTPOutgoingSourceGroup *_wrap_new_RTPOutgoingSourceGroup__SWIG_1_mediaserver_3513984b9ef493bf(std::string *_swig_go_0, intgo _swig_go_1) {
  std::string *arg1 = 0 ;
  MediaFrame::Type arg2 ;
  RTPOutgoingSourceGroup *result = 0 ;
  RTPOutgoingSourceGroup *_swig_go_result;
  
  arg1 = *(std::string **)&_swig_go_0; 
  arg2 = (MediaFrame::Type)_swig_go_1; 
  
  result = (RTPOutgoingSourceGroup *)new RTPOutgoingSourceGroup(*arg1,arg2);
  *(RTPOutgoingSourceGroup **)&_swig_go_result = (RTPOutgoingSourceGroup *)result; 
  return _swig_go_result;
}


void _wrap_RTPOutgoingSourceGroup_Xtype_set_mediaserver_3513984b9ef493bf(RTPOutgoingSourceGroup *_swig_go_0, intgo _swig_go_1) {
  RTPOutgoingSourceGroup *arg1 = (RTPOutgoingSourceGroup *) 0 ;
  MediaFrame::Type arg2 ;
  
  arg1 = *(RTPOutgoingSourceGroup **)&_swig_go_0; 
  arg2 = (MediaFrame::Type)_swig_go_1; 
  
  if (arg1) (arg1)->type = arg2;
  
}


intgo _wrap_RTPOutgoingSourceGroup_Xtype_get_mediaserver_3513984b9ef493bf(RTPOutgoingSourceGroup *_swig_go_0) {
  RTPOutgoingSourceGroup *arg1 = (RTPOutgoingSourceGroup *) 0 ;
  MediaFrame::Type result;
  intgo _swig_go_result;
  
  arg1 = *(RTPOutgoingSourceGroup **)&_swig_go_0; 
  
  result = (MediaFrame::Type) ((arg1)->type);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_RTPOutgoingSourceGroup_media_set_mediaserver_3513984b9ef493bf(RTPOutgoingSourceGroup *_swig_go_0, RTPOutgoingSource *_swig_go_1) {
  RTPOutgoingSourceGroup *arg1 = (RTPOutgoingSourceGroup *) 0 ;
  RTPOutgoingSource *arg2 = (RTPOutgoingSource *) 0 ;
  
  arg1 = *(RTPOutgoingSourceGroup **)&_swig_go_0; 
  arg2 = *(RTPOutgoingSource **)&_swig_go_1; 
  
  if (arg1) (arg1)->media = *arg2;
  
}


RTPOutgoingSource *_wrap_RTPOutgoingSourceGroup_media_get_mediaserver_3513984b9ef493bf(RTPOutgoingSourceGroup *_swig_go_0) {
  RTPOutgoingSourceGroup *arg1 = (RTPOutgoingSourceGroup *) 0 ;
  RTPOutgoingSource *result = 0 ;
  RTPOutgoingSource *_swig_go_result;
  
  arg1 = *(RTPOutgoingSourceGroup **)&_swig_go_0; 
  
  result = (RTPOutgoingSource *)& ((arg1)->media);
  *(RTPOutgoingSource **)&_swig_go_result = (RTPOutgoingSource *)result; 
  return _swig_go_result;
}


void _wrap_RTPOutgoingSourceGroup_fec_set_mediaserver_3513984b9ef493bf(RTPOutgoingSourceGroup *_swig_go_0, RTPOutgoingSource *_swig_go_1) {
  RTPOutgoingSourceGroup *arg1 = (RTPOutgoingSourceGroup *) 0 ;
  RTPOutgoingSource *arg2 = (RTPOutgoingSource *) 0 ;
  
  arg1 = *(RTPOutgoingSourceGroup **)&_swig_go_0; 
  arg2 = *(RTPOutgoingSource **)&_swig_go_1; 
  
  if (arg1) (arg1)->fec = *arg2;
  
}


RTPOutgoingSource *_wrap_RTPOutgoingSourceGroup_fec_get_mediaserver_3513984b9ef493bf(RTPOutgoingSourceGroup *_swig_go_0) {
  RTPOutgoingSourceGroup *arg1 = (RTPOutgoingSourceGroup *) 0 ;
  RTPOutgoingSource *result = 0 ;
  RTPOutgoingSource *_swig_go_result;
  
  arg1 = *(RTPOutgoingSourceGroup **)&_swig_go_0; 
  
  result = (RTPOutgoingSource *)& ((arg1)->fec);
  *(RTPOutgoingSource **)&_swig_go_result = (RTPOutgoingSource *)result; 
  return _swig_go_result;
}


void _wrap_RTPOutgoingSourceGroup_rtx_set_mediaserver_3513984b9ef493bf(RTPOutgoingSourceGroup *_swig_go_0, RTPOutgoingSource *_swig_go_1) {
  RTPOutgoingSourceGroup *arg1 = (RTPOutgoingSourceGroup *) 0 ;
  RTPOutgoingSource *arg2 = (RTPOutgoingSource *) 0 ;
  
  arg1 = *(RTPOutgoingSourceGroup **)&_swig_go_0; 
  arg2 = *(RTPOutgoingSource **)&_swig_go_1; 
  
  if (arg1) (arg1)->rtx = *arg2;
  
}


RTPOutgoingSource *_wrap_RTPOutgoingSourceGroup_rtx_get_mediaserver_3513984b9ef493bf(RTPOutgoingSourceGroup *_swig_go_0) {
  RTPOutgoingSourceGroup *arg1 = (RTPOutgoingSourceGroup *) 0 ;
  RTPOutgoingSource *result = 0 ;
  RTPOutgoingSource *_swig_go_result;
  
  arg1 = *(RTPOutgoingSourceGroup **)&_swig_go_0; 
  
  result = (RTPOutgoingSource *)& ((arg1)->rtx);
  *(RTPOutgoingSource **)&_swig_go_result = (RTPOutgoingSource *)result; 
  return _swig_go_result;
}


void _wrap_delete_RTPOutgoingSourceGroup_mediaserver_3513984b9ef493bf(RTPOutgoingSourceGroup *_swig_go_0) {
  RTPOutgoingSourceGroup *arg1 = (RTPOutgoingSourceGroup *) 0 ;
  
  arg1 = *(RTPOutgoingSourceGroup **)&_swig_go_0; 
  
  delete arg1;
  
}


RTPIncomingSourceGroup *_wrap_new_RTPIncomingSourceGroup_mediaserver_3513984b9ef493bf(intgo _swig_go_0) {
  MediaFrame::Type arg1 ;
  RTPIncomingSourceGroup *result = 0 ;
  RTPIncomingSourceGroup *_swig_go_result;
  
  arg1 = (MediaFrame::Type)_swig_go_0; 
  
  result = (RTPIncomingSourceGroup *)new RTPIncomingSourceGroup(arg1);
  *(RTPIncomingSourceGroup **)&_swig_go_result = (RTPIncomingSourceGroup *)result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSourceGroup_rid_set_mediaserver_3513984b9ef493bf(RTPIncomingSourceGroup *_swig_go_0, std::string *_swig_go_1) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  argp2 = (std::string *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::string");
  }
  arg2 = (std::string)*argp2;
  
  
  if (arg1) (arg1)->rid = arg2;
  
}


std::string *_wrap_RTPIncomingSourceGroup_rid_get_mediaserver_3513984b9ef493bf(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  std::string result;
  std::string *_swig_go_result;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  result =  ((arg1)->rid);
  *(std::string **)&_swig_go_result = new std::string(result); 
  return _swig_go_result;
}


void _wrap_RTPIncomingSourceGroup_mid_set_mediaserver_3513984b9ef493bf(RTPIncomingSourceGroup *_swig_go_0, std::string *_swig_go_1) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  argp2 = (std::string *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::string");
  }
  arg2 = (std::string)*argp2;
  
  
  if (arg1) (arg1)->mid = arg2;
  
}


std::string *_wrap_RTPIncomingSourceGroup_mid_get_mediaserver_3513984b9ef493bf(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  std::string result;
  std::string *_swig_go_result;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  result =  ((arg1)->mid);
  *(std::string **)&_swig_go_result = new std::string(result); 
  return _swig_go_result;
}


void _wrap_RTPIncomingSourceGroup_rtt_set_mediaserver_3513984b9ef493bf(RTPIncomingSourceGroup *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  if (arg1) (arg1)->rtt = arg2;
  
}


intgo _wrap_RTPIncomingSourceGroup_rtt_get_mediaserver_3513984b9ef493bf(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  result = (uint32_t) ((arg1)->rtt);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSourceGroup_Xtype_set_mediaserver_3513984b9ef493bf(RTPIncomingSourceGroup *_swig_go_0, intgo _swig_go_1) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  MediaFrame::Type arg2 ;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  arg2 = (MediaFrame::Type)_swig_go_1; 
  
  if (arg1) (arg1)->type = arg2;
  
}


intgo _wrap_RTPIncomingSourceGroup_Xtype_get_mediaserver_3513984b9ef493bf(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  MediaFrame::Type result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  result = (MediaFrame::Type) ((arg1)->type);
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSourceGroup_media_set_mediaserver_3513984b9ef493bf(RTPIncomingSourceGroup *_swig_go_0, RTPIncomingSource *_swig_go_1) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  RTPIncomingSource *arg2 = (RTPIncomingSource *) 0 ;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  arg2 = *(RTPIncomingSource **)&_swig_go_1; 
  
  if (arg1) (arg1)->media = *arg2;
  
}


RTPIncomingSource *_wrap_RTPIncomingSourceGroup_media_get_mediaserver_3513984b9ef493bf(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  RTPIncomingSource *result = 0 ;
  RTPIncomingSource *_swig_go_result;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  result = (RTPIncomingSource *)& ((arg1)->media);
  *(RTPIncomingSource **)&_swig_go_result = (RTPIncomingSource *)result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSourceGroup_fec_set_mediaserver_3513984b9ef493bf(RTPIncomingSourceGroup *_swig_go_0, RTPIncomingSource *_swig_go_1) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  RTPIncomingSource *arg2 = (RTPIncomingSource *) 0 ;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  arg2 = *(RTPIncomingSource **)&_swig_go_1; 
  
  if (arg1) (arg1)->fec = *arg2;
  
}


RTPIncomingSource *_wrap_RTPIncomingSourceGroup_fec_get_mediaserver_3513984b9ef493bf(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  RTPIncomingSource *result = 0 ;
  RTPIncomingSource *_swig_go_result;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  result = (RTPIncomingSource *)& ((arg1)->fec);
  *(RTPIncomingSource **)&_swig_go_result = (RTPIncomingSource *)result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSourceGroup_rtx_set_mediaserver_3513984b9ef493bf(RTPIncomingSourceGroup *_swig_go_0, RTPIncomingSource *_swig_go_1) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  RTPIncomingSource *arg2 = (RTPIncomingSource *) 0 ;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  arg2 = *(RTPIncomingSource **)&_swig_go_1; 
  
  if (arg1) (arg1)->rtx = *arg2;
  
}


RTPIncomingSource *_wrap_RTPIncomingSourceGroup_rtx_get_mediaserver_3513984b9ef493bf(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  RTPIncomingSource *result = 0 ;
  RTPIncomingSource *_swig_go_result;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  result = (RTPIncomingSource *)& ((arg1)->rtx);
  *(RTPIncomingSource **)&_swig_go_result = (RTPIncomingSource *)result; 
  return _swig_go_result;
}


void _wrap_RTPIncomingSourceGroup_Update_mediaserver_3513984b9ef493bf(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  (arg1)->Update();
  
}


intgo _wrap_RTPIncomingSourceGroup_GetCurrentLost_mediaserver_3513984b9ef493bf(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  result = (uint32_t)(arg1)->GetCurrentLost();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RTPIncomingSourceGroup_GetMinWaitedTime_mediaserver_3513984b9ef493bf(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  result = (uint32_t)(arg1)->GetMinWaitedTime();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RTPIncomingSourceGroup_GetMaxWaitedTime_mediaserver_3513984b9ef493bf(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  result = (uint32_t)(arg1)->GetMaxWaitedTime();
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_RTPIncomingSourceGroup_GetAvgWaitedTime_mediaserver_3513984b9ef493bf(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  result = (double)(arg1)->GetAvgWaitedTime();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_RTPIncomingSourceGroup_mediaserver_3513984b9ef493bf(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  delete arg1;
  
}


StringFacade *_wrap_new_StringFacade__SWIG_0_mediaserver_3513984b9ef493bf(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  StringFacade *result = 0 ;
  StringFacade *_swig_go_result;
  
  
  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';
  
  
  result = (StringFacade *)new StringFacade((char const *)arg1);
  *(StringFacade **)&_swig_go_result = (StringFacade *)result; 
  free(arg1); 
  return _swig_go_result;
}


StringFacade *_wrap_new_StringFacade__SWIG_1_mediaserver_3513984b9ef493bf(std::string *_swig_go_0) {
  std::string *arg1 = 0 ;
  StringFacade *result = 0 ;
  StringFacade *_swig_go_result;
  
  arg1 = *(std::string **)&_swig_go_0; 
  
  result = (StringFacade *)new StringFacade(*arg1);
  *(StringFacade **)&_swig_go_result = (StringFacade *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_StringFacade_toString_mediaserver_3513984b9ef493bf(StringFacade *_swig_go_0) {
  StringFacade *arg1 = (StringFacade *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(StringFacade **)&_swig_go_0; 
  
  result = (char *)(arg1)->toString();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_delete_StringFacade_mediaserver_3513984b9ef493bf(StringFacade *_swig_go_0) {
  StringFacade *arg1 = (StringFacade *) 0 ;
  
  arg1 = *(StringFacade **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_PropertiesFacade_SetProperty__SWIG_0_mediaserver_3513984b9ef493bf(PropertiesFacade *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  PropertiesFacade *arg1 = (PropertiesFacade *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = *(PropertiesFacade **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (int)_swig_go_2; 
  
  (arg1)->SetProperty((char const *)arg2,arg3);
  
  free(arg2); 
}


void _wrap_PropertiesFacade_SetProperty__SWIG_1_mediaserver_3513984b9ef493bf(PropertiesFacade *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  PropertiesFacade *arg1 = (PropertiesFacade *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = *(PropertiesFacade **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';
  
  
  (arg1)->SetProperty((char const *)arg2,(char const *)arg3);
  
  free(arg2); 
  free(arg3); 
}


void _wrap_PropertiesFacade_SetProperty__SWIG_2_mediaserver_3513984b9ef493bf(PropertiesFacade *_swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  PropertiesFacade *arg1 = (PropertiesFacade *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = *(PropertiesFacade **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (bool)_swig_go_2; 
  
  (arg1)->SetProperty((char const *)arg2,arg3);
  
  free(arg2); 
}


PropertiesFacade *_wrap_new_PropertiesFacade_mediaserver_3513984b9ef493bf() {
  PropertiesFacade *result = 0 ;
  PropertiesFacade *_swig_go_result;
  
  
  result = (PropertiesFacade *)new PropertiesFacade();
  *(PropertiesFacade **)&_swig_go_result = (PropertiesFacade *)result; 
  return _swig_go_result;
}


void _wrap_delete_PropertiesFacade_mediaserver_3513984b9ef493bf(PropertiesFacade *_swig_go_0) {
  PropertiesFacade *arg1 = (PropertiesFacade *) 0 ;
  
  arg1 = *(PropertiesFacade **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_MediaServer_Initialize_mediaserver_3513984b9ef493bf() {
  MediaServer::Initialize();
  
}


void _wrap_MediaServer_EnableLog_mediaserver_3513984b9ef493bf(bool _swig_go_0) {
  bool arg1 ;
  
  arg1 = (bool)_swig_go_0; 
  
  MediaServer::EnableLog(arg1);
  
}


void _wrap_MediaServer_EnableDebug_mediaserver_3513984b9ef493bf(bool _swig_go_0) {
  bool arg1 ;
  
  arg1 = (bool)_swig_go_0; 
  
  MediaServer::EnableDebug(arg1);
  
}


void _wrap_MediaServer_EnableUltraDebug_mediaserver_3513984b9ef493bf(bool _swig_go_0) {
  bool arg1 ;
  
  arg1 = (bool)_swig_go_0; 
  
  MediaServer::EnableUltraDebug(arg1);
  
}


StringFacade *_wrap_MediaServer_GetFingerprint_mediaserver_3513984b9ef493bf() {
  SwigValueWrapper< StringFacade > result;
  StringFacade *_swig_go_result;
  
  
  result = MediaServer::GetFingerprint();
  *(StringFacade **)&_swig_go_result = new StringFacade(result); 
  return _swig_go_result;
}


bool _wrap_MediaServer_SetPortRange_mediaserver_3513984b9ef493bf(intgo _swig_go_0, intgo _swig_go_1) {
  int arg1 ;
  int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (bool)MediaServer::SetPortRange(arg1,arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


MediaServer *_wrap_new_MediaServer_mediaserver_3513984b9ef493bf() {
  MediaServer *result = 0 ;
  MediaServer *_swig_go_result;
  
  
  result = (MediaServer *)new MediaServer();
  *(MediaServer **)&_swig_go_result = (MediaServer *)result; 
  return _swig_go_result;
}


void _wrap_delete_MediaServer_mediaserver_3513984b9ef493bf(MediaServer *_swig_go_0) {
  MediaServer *arg1 = (MediaServer *) 0 ;
  
  arg1 = *(MediaServer **)&_swig_go_0; 
  
  delete arg1;
  
}


RTPSessionFacade *_wrap_new_RTPSessionFacade_mediaserver_3513984b9ef493bf(intgo _swig_go_0) {
  MediaFrame::Type arg1 ;
  RTPSessionFacade *result = 0 ;
  RTPSessionFacade *_swig_go_result;
  
  arg1 = (MediaFrame::Type)_swig_go_0; 
  
  result = (RTPSessionFacade *)new RTPSessionFacade(arg1);
  *(RTPSessionFacade **)&_swig_go_result = (RTPSessionFacade *)result; 
  return _swig_go_result;
}


intgo _wrap_RTPSessionFacade_Init_mediaserver_3513984b9ef493bf(RTPSessionFacade *_swig_go_0, Properties *_swig_go_1) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  Properties *arg2 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  arg2 = *(Properties **)&_swig_go_1; 
  
  result = (int)(arg1)->Init((Properties const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RTPSessionFacade_SetLocalPort_mediaserver_3513984b9ef493bf(RTPSessionFacade *_swig_go_0, intgo _swig_go_1) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  int arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  result = (int)(arg1)->SetLocalPort(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RTPSessionFacade_GetLocalPort_mediaserver_3513984b9ef493bf(RTPSessionFacade *_swig_go_0) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  
  result = (int)(arg1)->GetLocalPort();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RTPSessionFacade_SetRemotePort_mediaserver_3513984b9ef493bf(RTPSessionFacade *_swig_go_0, _gostring_ _swig_go_1, intgo _swig_go_2) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  arg3 = (int)_swig_go_2; 
  
  result = (int)(arg1)->SetRemotePort(arg2,arg3);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


RTPOutgoingSourceGroup *_wrap_RTPSessionFacade_GetOutgoingSourceGroup_mediaserver_3513984b9ef493bf(RTPSessionFacade *_swig_go_0) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  RTPOutgoingSourceGroup *result = 0 ;
  RTPOutgoingSourceGroup *_swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  
  result = (RTPOutgoingSourceGroup *)(arg1)->GetOutgoingSourceGroup();
  *(RTPOutgoingSourceGroup **)&_swig_go_result = (RTPOutgoingSourceGroup *)result; 
  return _swig_go_result;
}


RTPIncomingSourceGroup *_wrap_RTPSessionFacade_GetIncomingSourceGroup_mediaserver_3513984b9ef493bf(RTPSessionFacade *_swig_go_0) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  RTPIncomingSourceGroup *result = 0 ;
  RTPIncomingSourceGroup *_swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  
  result = (RTPIncomingSourceGroup *)(arg1)->GetIncomingSourceGroup();
  *(RTPIncomingSourceGroup **)&_swig_go_result = (RTPIncomingSourceGroup *)result; 
  return _swig_go_result;
}


intgo _wrap_RTPSessionFacade_End_mediaserver_3513984b9ef493bf(RTPSessionFacade *_swig_go_0) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  
  result = (int)(arg1)->End();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RTPSessionFacade_Enqueue_mediaserver_3513984b9ef493bf(RTPSessionFacade *_swig_go_0, RTPPacket::shared *_swig_go_1) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  RTPPacket::shared *arg2 = 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  arg2 = *(RTPPacket::shared **)&_swig_go_1; 
  
  result = (int)(arg1)->Enqueue((RTPPacket::shared const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_RTPSessionFacade_SendPLI_mediaserver_3513984b9ef493bf(RTPSessionFacade *_swig_go_0, intgo _swig_go_1) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  uint32_t arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  result = (int)(arg1)->SendPLI(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_RTPSessionFacade_mediaserver_3513984b9ef493bf(RTPSessionFacade *_swig_go_0) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  
  delete arg1;
  
}


RTPSenderFacade *_wrap_new_RTPSenderFacade__SWIG_0_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  RTPSenderFacade *result = 0 ;
  RTPSenderFacade *_swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  result = (RTPSenderFacade *)new RTPSenderFacade(arg1);
  *(RTPSenderFacade **)&_swig_go_result = (RTPSenderFacade *)result; 
  return _swig_go_result;
}


RTPSenderFacade *_wrap_new_RTPSenderFacade__SWIG_1_mediaserver_3513984b9ef493bf(RTPSessionFacade *_swig_go_0) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  RTPSenderFacade *result = 0 ;
  RTPSenderFacade *_swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  
  result = (RTPSenderFacade *)new RTPSenderFacade(arg1);
  *(RTPSenderFacade **)&_swig_go_result = (RTPSenderFacade *)result; 
  return _swig_go_result;
}


RTPSender *_wrap_RTPSenderFacade_get_mediaserver_3513984b9ef493bf(RTPSenderFacade *_swig_go_0) {
  RTPSenderFacade *arg1 = (RTPSenderFacade *) 0 ;
  RTPSender *result = 0 ;
  RTPSender *_swig_go_result;
  
  arg1 = *(RTPSenderFacade **)&_swig_go_0; 
  
  result = (RTPSender *)(arg1)->get();
  *(RTPSender **)&_swig_go_result = (RTPSender *)result; 
  return _swig_go_result;
}


void _wrap_delete_RTPSenderFacade_mediaserver_3513984b9ef493bf(RTPSenderFacade *_swig_go_0) {
  RTPSenderFacade *arg1 = (RTPSenderFacade *) 0 ;
  
  arg1 = *(RTPSenderFacade **)&_swig_go_0; 
  
  delete arg1;
  
}


RTPReceiverFacade *_wrap_new_RTPReceiverFacade__SWIG_0_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  RTPReceiverFacade *result = 0 ;
  RTPReceiverFacade *_swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  result = (RTPReceiverFacade *)new RTPReceiverFacade(arg1);
  *(RTPReceiverFacade **)&_swig_go_result = (RTPReceiverFacade *)result; 
  return _swig_go_result;
}


RTPReceiverFacade *_wrap_new_RTPReceiverFacade__SWIG_1_mediaserver_3513984b9ef493bf(RTPSessionFacade *_swig_go_0) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  RTPReceiverFacade *result = 0 ;
  RTPReceiverFacade *_swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  
  result = (RTPReceiverFacade *)new RTPReceiverFacade(arg1);
  *(RTPReceiverFacade **)&_swig_go_result = (RTPReceiverFacade *)result; 
  return _swig_go_result;
}


RTPReceiverFacade *_wrap_new_RTPReceiverFacade__SWIG_2_mediaserver_3513984b9ef493bf(PCAPTransportEmulator *_swig_go_0) {
  PCAPTransportEmulator *arg1 = (PCAPTransportEmulator *) 0 ;
  RTPReceiverFacade *result = 0 ;
  RTPReceiverFacade *_swig_go_result;
  
  arg1 = *(PCAPTransportEmulator **)&_swig_go_0; 
  
  result = (RTPReceiverFacade *)new RTPReceiverFacade(arg1);
  *(RTPReceiverFacade **)&_swig_go_result = (RTPReceiverFacade *)result; 
  return _swig_go_result;
}


RTPReceiver *_wrap_RTPReceiverFacade_get_mediaserver_3513984b9ef493bf(RTPReceiverFacade *_swig_go_0) {
  RTPReceiverFacade *arg1 = (RTPReceiverFacade *) 0 ;
  RTPReceiver *result = 0 ;
  RTPReceiver *_swig_go_result;
  
  arg1 = *(RTPReceiverFacade **)&_swig_go_0; 
  
  result = (RTPReceiver *)(arg1)->get();
  *(RTPReceiver **)&_swig_go_result = (RTPReceiver *)result; 
  return _swig_go_result;
}


intgo _wrap_RTPReceiverFacade_SendPLI_mediaserver_3513984b9ef493bf(RTPReceiverFacade *_swig_go_0, intgo _swig_go_1) {
  RTPReceiverFacade *arg1 = (RTPReceiverFacade *) 0 ;
  uint32_t arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(RTPReceiverFacade **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  result = (int)(arg1)->SendPLI(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_RTPReceiverFacade_mediaserver_3513984b9ef493bf(RTPReceiverFacade *_swig_go_0) {
  RTPReceiverFacade *arg1 = (RTPReceiverFacade *) 0 ;
  
  arg1 = *(RTPReceiverFacade **)&_swig_go_0; 
  
  delete arg1;
  
}


RTPSenderFacade *_wrap_TransportToSender_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  RTPSenderFacade *result = 0 ;
  RTPSenderFacade *_swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  result = (RTPSenderFacade *)TransportToSender(arg1);
  *(RTPSenderFacade **)&_swig_go_result = (RTPSenderFacade *)result; 
  return _swig_go_result;
}


RTPReceiverFacade *_wrap_TransportToReceiver_mediaserver_3513984b9ef493bf(DTLSICETransport *_swig_go_0) {
  DTLSICETransport *arg1 = (DTLSICETransport *) 0 ;
  RTPReceiverFacade *result = 0 ;
  RTPReceiverFacade *_swig_go_result;
  
  arg1 = *(DTLSICETransport **)&_swig_go_0; 
  
  result = (RTPReceiverFacade *)TransportToReceiver(arg1);
  *(RTPReceiverFacade **)&_swig_go_result = (RTPReceiverFacade *)result; 
  return _swig_go_result;
}


RTPReceiverFacade *_wrap_PCAPTransportEmulatorToReceiver_mediaserver_3513984b9ef493bf(PCAPTransportEmulator *_swig_go_0) {
  PCAPTransportEmulator *arg1 = (PCAPTransportEmulator *) 0 ;
  RTPReceiverFacade *result = 0 ;
  RTPReceiverFacade *_swig_go_result;
  
  arg1 = *(PCAPTransportEmulator **)&_swig_go_0; 
  
  result = (RTPReceiverFacade *)PCAPTransportEmulatorToReceiver(arg1);
  *(RTPReceiverFacade **)&_swig_go_result = (RTPReceiverFacade *)result; 
  return _swig_go_result;
}


RTPSenderFacade *_wrap_SessionToSender_mediaserver_3513984b9ef493bf(RTPSessionFacade *_swig_go_0) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  RTPSenderFacade *result = 0 ;
  RTPSenderFacade *_swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  
  result = (RTPSenderFacade *)SessionToSender(arg1);
  *(RTPSenderFacade **)&_swig_go_result = (RTPSenderFacade *)result; 
  return _swig_go_result;
}


RTPReceiverFacade *_wrap_SessionToReceiver_mediaserver_3513984b9ef493bf(RTPSessionFacade *_swig_go_0) {
  RTPSessionFacade *arg1 = (RTPSessionFacade *) 0 ;
  RTPReceiverFacade *result = 0 ;
  RTPReceiverFacade *_swig_go_result;
  
  arg1 = *(RTPSessionFacade **)&_swig_go_0; 
  
  result = (RTPReceiverFacade *)SessionToReceiver(arg1);
  *(RTPReceiverFacade **)&_swig_go_result = (RTPReceiverFacade *)result; 
  return _swig_go_result;
}


RTPStreamTransponderFacade *_wrap_new_RTPStreamTransponderFacade_mediaserver_3513984b9ef493bf(RTPOutgoingSourceGroup *_swig_go_0, RTPSenderFacade *_swig_go_1, REMBBitrateListener *_swig_go_2) {
  RTPOutgoingSourceGroup *arg1 = (RTPOutgoingSourceGroup *) 0 ;
  RTPSenderFacade *arg2 = (RTPSenderFacade *) 0 ;
  REMBBitrateListener *arg3 = (REMBBitrateListener *) 0 ;
  RTPStreamTransponderFacade *result = 0 ;
  RTPStreamTransponderFacade *_swig_go_result;
  
  arg1 = *(RTPOutgoingSourceGroup **)&_swig_go_0; 
  arg2 = *(RTPSenderFacade **)&_swig_go_1; 
  arg3 = *(REMBBitrateListener **)&_swig_go_2; 
  
  result = (RTPStreamTransponderFacade *)new RTPStreamTransponderFacade(arg1,arg2,arg3);
  *(RTPStreamTransponderFacade **)&_swig_go_result = (RTPStreamTransponderFacade *)result; 
  return _swig_go_result;
}


bool _wrap_RTPStreamTransponderFacade_SetIncoming_mediaserver_3513984b9ef493bf(RTPStreamTransponderFacade *_swig_go_0, RTPIncomingSourceGroup *_swig_go_1, RTPReceiverFacade *_swig_go_2) {
  RTPStreamTransponderFacade *arg1 = (RTPStreamTransponderFacade *) 0 ;
  RTPIncomingSourceGroup *arg2 = (RTPIncomingSourceGroup *) 0 ;
  RTPReceiverFacade *arg3 = (RTPReceiverFacade *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(RTPStreamTransponderFacade **)&_swig_go_0; 
  arg2 = *(RTPIncomingSourceGroup **)&_swig_go_1; 
  arg3 = *(RTPReceiverFacade **)&_swig_go_2; 
  
  result = (bool)(arg1)->SetIncoming(arg2,arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RTPStreamTransponderFacade_SelectLayer_mediaserver_3513984b9ef493bf(RTPStreamTransponderFacade *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  RTPStreamTransponderFacade *arg1 = (RTPStreamTransponderFacade *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(RTPStreamTransponderFacade **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  (arg1)->SelectLayer(arg2,arg3);
  
}


void _wrap_RTPStreamTransponderFacade_Mute_mediaserver_3513984b9ef493bf(RTPStreamTransponderFacade *_swig_go_0, bool _swig_go_1) {
  RTPStreamTransponderFacade *arg1 = (RTPStreamTransponderFacade *) 0 ;
  bool arg2 ;
  
  arg1 = *(RTPStreamTransponderFacade **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  (arg1)->Mute(arg2);
  
}


void _wrap_RTPStreamTransponderFacade_Close_mediaserver_3513984b9ef493bf(RTPStreamTransponderFacade *_swig_go_0) {
  RTPStreamTransponderFacade *arg1 = (RTPStreamTransponderFacade *) 0 ;
  
  arg1 = *(RTPStreamTransponderFacade **)&_swig_go_0; 
  
  (arg1)->Close();
  
}


void _wrap_delete_RTPStreamTransponderFacade_mediaserver_3513984b9ef493bf(RTPStreamTransponderFacade *_swig_go_0) {
  RTPStreamTransponderFacade *arg1 = (RTPStreamTransponderFacade *) 0 ;
  
  arg1 = *(RTPStreamTransponderFacade **)&_swig_go_0; 
  
  delete arg1;
  
}


StreamTrackDepacketizer *_wrap_new_StreamTrackDepacketizer_mediaserver_3513984b9ef493bf(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  StreamTrackDepacketizer *result = 0 ;
  StreamTrackDepacketizer *_swig_go_result;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  result = (StreamTrackDepacketizer *)new StreamTrackDepacketizer(arg1);
  *(StreamTrackDepacketizer **)&_swig_go_result = (StreamTrackDepacketizer *)result; 
  return _swig_go_result;
}


void _wrap_StreamTrackDepacketizer_AddMediaListener_mediaserver_3513984b9ef493bf(StreamTrackDepacketizer *_swig_go_0, MediaFrame::Listener *_swig_go_1) {
  StreamTrackDepacketizer *arg1 = (StreamTrackDepacketizer *) 0 ;
  MediaFrame::Listener *arg2 = (MediaFrame::Listener *) 0 ;
  
  arg1 = *(StreamTrackDepacketizer **)&_swig_go_0; 
  arg2 = *(MediaFrame::Listener **)&_swig_go_1; 
  
  (arg1)->AddMediaListener(arg2);
  
}


void _wrap_StreamTrackDepacketizer_RemoveMediaListener_mediaserver_3513984b9ef493bf(StreamTrackDepacketizer *_swig_go_0, MediaFrame::Listener *_swig_go_1) {
  StreamTrackDepacketizer *arg1 = (StreamTrackDepacketizer *) 0 ;
  MediaFrame::Listener *arg2 = (MediaFrame::Listener *) 0 ;
  
  arg1 = *(StreamTrackDepacketizer **)&_swig_go_0; 
  arg2 = *(MediaFrame::Listener **)&_swig_go_1; 
  
  (arg1)->RemoveMediaListener(arg2);
  
}


void _wrap_StreamTrackDepacketizer_Stop_mediaserver_3513984b9ef493bf(StreamTrackDepacketizer *_swig_go_0) {
  StreamTrackDepacketizer *arg1 = (StreamTrackDepacketizer *) 0 ;
  
  arg1 = *(StreamTrackDepacketizer **)&_swig_go_0; 
  
  (arg1)->Stop();
  
}


void _wrap_delete_StreamTrackDepacketizer_mediaserver_3513984b9ef493bf(StreamTrackDepacketizer *_swig_go_0) {
  StreamTrackDepacketizer *arg1 = (StreamTrackDepacketizer *) 0 ;
  
  arg1 = *(StreamTrackDepacketizer **)&_swig_go_0; 
  
  delete arg1;
  
}


PlayerFacade *_wrap_new_PlayerFacade_mediaserver_3513984b9ef493bf() {
  PlayerFacade *result = 0 ;
  PlayerFacade *_swig_go_result;
  
  
  result = (PlayerFacade *)new PlayerFacade();
  *(PlayerFacade **)&_swig_go_result = (PlayerFacade *)result; 
  return _swig_go_result;
}


RTPIncomingSourceGroup *_wrap_PlayerFacade_GetAudioSource_mediaserver_3513984b9ef493bf(PlayerFacade *_swig_go_0) {
  PlayerFacade *arg1 = (PlayerFacade *) 0 ;
  RTPIncomingSourceGroup *result = 0 ;
  RTPIncomingSourceGroup *_swig_go_result;
  
  arg1 = *(PlayerFacade **)&_swig_go_0; 
  
  result = (RTPIncomingSourceGroup *)(arg1)->GetAudioSource();
  *(RTPIncomingSourceGroup **)&_swig_go_result = (RTPIncomingSourceGroup *)result; 
  return _swig_go_result;
}


RTPIncomingSourceGroup *_wrap_PlayerFacade_GetVideoSource_mediaserver_3513984b9ef493bf(PlayerFacade *_swig_go_0) {
  PlayerFacade *arg1 = (PlayerFacade *) 0 ;
  RTPIncomingSourceGroup *result = 0 ;
  RTPIncomingSourceGroup *_swig_go_result;
  
  arg1 = *(PlayerFacade **)&_swig_go_0; 
  
  result = (RTPIncomingSourceGroup *)(arg1)->GetVideoSource();
  *(RTPIncomingSourceGroup **)&_swig_go_result = (RTPIncomingSourceGroup *)result; 
  return _swig_go_result;
}


void _wrap_PlayerFacade_Reset_mediaserver_3513984b9ef493bf(PlayerFacade *_swig_go_0) {
  PlayerFacade *arg1 = (PlayerFacade *) 0 ;
  
  arg1 = *(PlayerFacade **)&_swig_go_0; 
  
  (arg1)->Reset();
  
}


void _wrap_PlayerFacade_setPlayEndListener_mediaserver_3513984b9ef493bf(PlayerFacade *_swig_go_0, PlayerEndListener *_swig_go_1) {
  PlayerFacade *arg1 = (PlayerFacade *) 0 ;
  PlayerEndListener *arg2 = (PlayerEndListener *) 0 ;
  
  arg1 = *(PlayerFacade **)&_swig_go_0; 
  arg2 = *(PlayerEndListener **)&_swig_go_1; 
  
  (arg1)->setPlayEndListener(arg2);
  
}


intgo _wrap_PlayerFacade_Open_mediaserver_3513984b9ef493bf(PlayerFacade *_swig_go_0, _gostring_ _swig_go_1) {
  PlayerFacade *arg1 = (PlayerFacade *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(PlayerFacade **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  result = (int)(arg1)->Open((char const *)arg2);
  _swig_go_result = result; 
  free(arg2); 
  return _swig_go_result;
}


bool _wrap_PlayerFacade_HasAudioTrack_mediaserver_3513984b9ef493bf(PlayerFacade *_swig_go_0) {
  PlayerFacade *arg1 = (PlayerFacade *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(PlayerFacade **)&_swig_go_0; 
  
  result = (bool)(arg1)->HasAudioTrack();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_PlayerFacade_HasVideoTrack_mediaserver_3513984b9ef493bf(PlayerFacade *_swig_go_0) {
  PlayerFacade *arg1 = (PlayerFacade *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(PlayerFacade **)&_swig_go_0; 
  
  result = (bool)(arg1)->HasVideoTrack();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_PlayerFacade_GetAudioCodec_mediaserver_3513984b9ef493bf(PlayerFacade *_swig_go_0) {
  PlayerFacade *arg1 = (PlayerFacade *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(PlayerFacade **)&_swig_go_0; 
  
  result = (uint32_t)(arg1)->GetAudioCodec();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_PlayerFacade_GetVideoCodec_mediaserver_3513984b9ef493bf(PlayerFacade *_swig_go_0) {
  PlayerFacade *arg1 = (PlayerFacade *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(PlayerFacade **)&_swig_go_0; 
  
  result = (uint32_t)(arg1)->GetVideoCodec();
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_PlayerFacade_GetDuration_mediaserver_3513984b9ef493bf(PlayerFacade *_swig_go_0) {
  PlayerFacade *arg1 = (PlayerFacade *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(PlayerFacade **)&_swig_go_0; 
  
  result = (double)(arg1)->GetDuration();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_PlayerFacade_GetVideoWidth_mediaserver_3513984b9ef493bf(PlayerFacade *_swig_go_0) {
  PlayerFacade *arg1 = (PlayerFacade *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(PlayerFacade **)&_swig_go_0; 
  
  result = (uint32_t)(arg1)->GetVideoWidth();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_PlayerFacade_GetVideoHeight_mediaserver_3513984b9ef493bf(PlayerFacade *_swig_go_0) {
  PlayerFacade *arg1 = (PlayerFacade *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(PlayerFacade **)&_swig_go_0; 
  
  result = (uint32_t)(arg1)->GetVideoHeight();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_PlayerFacade_GetVideoBitrate_mediaserver_3513984b9ef493bf(PlayerFacade *_swig_go_0) {
  PlayerFacade *arg1 = (PlayerFacade *) 0 ;
  uint32_t result;
  intgo _swig_go_result;
  
  arg1 = *(PlayerFacade **)&_swig_go_0; 
  
  result = (uint32_t)(arg1)->GetVideoBitrate();
  _swig_go_result = result; 
  return _swig_go_result;
}


double _wrap_PlayerFacade_GetVideoFramerate_mediaserver_3513984b9ef493bf(PlayerFacade *_swig_go_0) {
  PlayerFacade *arg1 = (PlayerFacade *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(PlayerFacade **)&_swig_go_0; 
  
  result = (double)(arg1)->GetVideoFramerate();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_PlayerFacade_Play_mediaserver_3513984b9ef493bf(PlayerFacade *_swig_go_0) {
  PlayerFacade *arg1 = (PlayerFacade *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(PlayerFacade **)&_swig_go_0; 
  
  result = (int)(arg1)->Play();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_PlayerFacade_PreSeek_mediaserver_3513984b9ef493bf(PlayerFacade *_swig_go_0, long long _swig_go_1) {
  PlayerFacade *arg1 = (PlayerFacade *) 0 ;
  uint64_t arg2 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(PlayerFacade **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  
  result = (uint64_t)(arg1)->PreSeek(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_PlayerFacade_Seek_mediaserver_3513984b9ef493bf(PlayerFacade *_swig_go_0, long long _swig_go_1) {
  PlayerFacade *arg1 = (PlayerFacade *) 0 ;
  uint64_t arg2 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(PlayerFacade **)&_swig_go_0; 
  arg2 = (uint64_t)_swig_go_1; 
  
  result = (int)(arg1)->Seek(arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_PlayerFacade_Tell_mediaserver_3513984b9ef493bf(PlayerFacade *_swig_go_0) {
  PlayerFacade *arg1 = (PlayerFacade *) 0 ;
  uint64_t result;
  long long _swig_go_result;
  
  arg1 = *(PlayerFacade **)&_swig_go_0; 
  
  result = (uint64_t)(arg1)->Tell();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_PlayerFacade_Stop_mediaserver_3513984b9ef493bf(PlayerFacade *_swig_go_0) {
  PlayerFacade *arg1 = (PlayerFacade *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(PlayerFacade **)&_swig_go_0; 
  
  result = (int)(arg1)->Stop();
  _swig_go_result = result; 
  return _swig_go_result;
}


intgo _wrap_PlayerFacade_Close_mediaserver_3513984b9ef493bf(PlayerFacade *_swig_go_0) {
  PlayerFacade *arg1 = (PlayerFacade *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(PlayerFacade **)&_swig_go_0; 
  
  result = (int)(arg1)->Close();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_PlayerFacade_mediaserver_3513984b9ef493bf(PlayerFacade *_swig_go_0) {
  PlayerFacade *arg1 = (PlayerFacade *) 0 ;
  
  arg1 = *(PlayerFacade **)&_swig_go_0; 
  
  delete arg1;
  
}


SenderSideEstimatorListener *_wrap__swig_NewDirectorSenderSideEstimatorListenerSenderSideEstimatorListener_mediaserver_3513984b9ef493bf(intgo _swig_go_0) {
  int arg1 ;
  SenderSideEstimatorListener *result = 0 ;
  SenderSideEstimatorListener *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = new SwigDirector_SenderSideEstimatorListener(arg1);
  *(SenderSideEstimatorListener **)&_swig_go_result = (SenderSideEstimatorListener *)result; 
  return _swig_go_result;
}


void _wrap_DeleteDirectorSenderSideEstimatorListener_mediaserver_3513984b9ef493bf(SenderSideEstimatorListener *_swig_go_0) {
  SenderSideEstimatorListener *arg1 = (SenderSideEstimatorListener *) 0 ;
  
  arg1 = *(SenderSideEstimatorListener **)&_swig_go_0; 
  
  delete arg1;
  
}


SenderSideEstimatorListener *_wrap_new_SenderSideEstimatorListener_mediaserver_3513984b9ef493bf() {
  SenderSideEstimatorListener *result = 0 ;
  SenderSideEstimatorListener *_swig_go_result;
  
  
  result = (SenderSideEstimatorListener *)new SenderSideEstimatorListener();
  *(SenderSideEstimatorListener **)&_swig_go_result = (SenderSideEstimatorListener *)result; 
  return _swig_go_result;
}


void _wrap_delete_SenderSideEstimatorListener_mediaserver_3513984b9ef493bf(SenderSideEstimatorListener *_swig_go_0) {
  SenderSideEstimatorListener *arg1 = (SenderSideEstimatorListener *) 0 ;
  
  arg1 = *(SenderSideEstimatorListener **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_SenderSideEstimatorListener_onTargetBitrateRequested_mediaserver_3513984b9ef493bf(SenderSideEstimatorListener *_swig_go_0, intgo _swig_go_1) {
  SenderSideEstimatorListener *arg1 = (SenderSideEstimatorListener *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(SenderSideEstimatorListener **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  (arg1)->onTargetBitrateRequested(arg2);
  
}


ActiveSpeakerDetectorFacade *_wrap_new_ActiveSpeakerDetectorFacade_mediaserver_3513984b9ef493bf() {
  ActiveSpeakerDetectorFacade *result = 0 ;
  ActiveSpeakerDetectorFacade *_swig_go_result;
  
  
  result = (ActiveSpeakerDetectorFacade *)new ActiveSpeakerDetectorFacade();
  *(ActiveSpeakerDetectorFacade **)&_swig_go_result = (ActiveSpeakerDetectorFacade *)result; 
  return _swig_go_result;
}


void _wrap_ActiveSpeakerDetectorFacade_SetMinChangePeriod_mediaserver_3513984b9ef493bf(ActiveSpeakerDetectorFacade *_swig_go_0, intgo _swig_go_1) {
  ActiveSpeakerDetectorFacade *arg1 = (ActiveSpeakerDetectorFacade *) 0 ;
  uint32_t arg2 ;
  
  arg1 = *(ActiveSpeakerDetectorFacade **)&_swig_go_0; 
  arg2 = (uint32_t)_swig_go_1; 
  
  (arg1)->SetMinChangePeriod(arg2);
  
}


void _wrap_ActiveSpeakerDetectorFacade_AddIncomingSourceGroup_mediaserver_3513984b9ef493bf(ActiveSpeakerDetectorFacade *_swig_go_0, RTPIncomingSourceGroup *_swig_go_1) {
  ActiveSpeakerDetectorFacade *arg1 = (ActiveSpeakerDetectorFacade *) 0 ;
  RTPIncomingSourceGroup *arg2 = (RTPIncomingSourceGroup *) 0 ;
  
  arg1 = *(ActiveSpeakerDetectorFacade **)&_swig_go_0; 
  arg2 = *(RTPIncomingSourceGroup **)&_swig_go_1; 
  
  (arg1)->AddIncomingSourceGroup(arg2);
  
}


void _wrap_ActiveSpeakerDetectorFacade_RemoveIncomingSourceGroup_mediaserver_3513984b9ef493bf(ActiveSpeakerDetectorFacade *_swig_go_0, RTPIncomingSourceGroup *_swig_go_1) {
  ActiveSpeakerDetectorFacade *arg1 = (ActiveSpeakerDetectorFacade *) 0 ;
  RTPIncomingSourceGroup *arg2 = (RTPIncomingSourceGroup *) 0 ;
  
  arg1 = *(ActiveSpeakerDetectorFacade **)&_swig_go_0; 
  arg2 = *(RTPIncomingSourceGroup **)&_swig_go_1; 
  
  (arg1)->RemoveIncomingSourceGroup(arg2);
  
}


void _wrap_delete_ActiveSpeakerDetectorFacade_mediaserver_3513984b9ef493bf(ActiveSpeakerDetectorFacade *_swig_go_0) {
  ActiveSpeakerDetectorFacade *arg1 = (ActiveSpeakerDetectorFacade *) 0 ;
  
  arg1 = *(ActiveSpeakerDetectorFacade **)&_swig_go_0; 
  
  delete arg1;
  
}


MediaFrameListener *_wrap__swig_NewDirectorMediaFrameListenerMediaFrameListener_mediaserver_3513984b9ef493bf(intgo _swig_go_0) {
  int arg1 ;
  MediaFrameListener *result = 0 ;
  MediaFrameListener *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = new SwigDirector_MediaFrameListener(arg1);
  *(MediaFrameListener **)&_swig_go_result = (MediaFrameListener *)result; 
  return _swig_go_result;
}


void _wrap_DeleteDirectorMediaFrameListener_mediaserver_3513984b9ef493bf(MediaFrameListener *_swig_go_0) {
  MediaFrameListener *arg1 = (MediaFrameListener *) 0 ;
  
  arg1 = *(MediaFrameListener **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap__swig_DirectorMediaFrameListener_upcall_OnMediaFrame_mediaserver_3513984b9ef493bf(SwigDirector_MediaFrameListener *_swig_go_0, MediaFrame *_swig_go_1) {
  SwigDirector_MediaFrameListener *arg1 = (SwigDirector_MediaFrameListener *) 0 ;
  MediaFrame *arg2 = 0 ;
  
  arg1 = *(SwigDirector_MediaFrameListener **)&_swig_go_0; 
  arg2 = *(MediaFrame **)&_swig_go_1; 
  
  arg1->_swig_upcall_onMediaFrame(*arg2);
  
}


MediaFrameListener *_wrap_new_MediaFrameListener_mediaserver_3513984b9ef493bf() {
  MediaFrameListener *result = 0 ;
  MediaFrameListener *_swig_go_result;
  
  
  result = (MediaFrameListener *)new MediaFrameListener();
  *(MediaFrameListener **)&_swig_go_result = (MediaFrameListener *)result; 
  return _swig_go_result;
}


void _wrap_delete_MediaFrameListener_mediaserver_3513984b9ef493bf(MediaFrameListener *_swig_go_0) {
  MediaFrameListener *arg1 = (MediaFrameListener *) 0 ;
  
  arg1 = *(MediaFrameListener **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_MediaFrameListener_onMediaFrame_mediaserver_3513984b9ef493bf(MediaFrameListener *_swig_go_0, MediaFrame *_swig_go_1) {
  MediaFrameListener *arg1 = (MediaFrameListener *) 0 ;
  MediaFrame *arg2 = 0 ;
  
  arg1 = *(MediaFrameListener **)&_swig_go_0; 
  arg2 = *(MediaFrame **)&_swig_go_1; 
  
  (arg1)->onMediaFrame(*arg2);
  
}


MediaStreamDuplicaterFacade *_wrap_new_MediaStreamDuplicaterFacade_mediaserver_3513984b9ef493bf(RTPIncomingSourceGroup *_swig_go_0) {
  RTPIncomingSourceGroup *arg1 = (RTPIncomingSourceGroup *) 0 ;
  MediaStreamDuplicaterFacade *result = 0 ;
  MediaStreamDuplicaterFacade *_swig_go_result;
  
  arg1 = *(RTPIncomingSourceGroup **)&_swig_go_0; 
  
  result = (MediaStreamDuplicaterFacade *)new MediaStreamDuplicaterFacade(arg1);
  *(MediaStreamDuplicaterFacade **)&_swig_go_result = (MediaStreamDuplicaterFacade *)result; 
  return _swig_go_result;
}


void _wrap_MediaStreamDuplicaterFacade_AddMediaListener_mediaserver_3513984b9ef493bf(MediaStreamDuplicaterFacade *_swig_go_0, MediaFrameListener *_swig_go_1) {
  MediaStreamDuplicaterFacade *arg1 = (MediaStreamDuplicaterFacade *) 0 ;
  MediaFrameListener *arg2 = (MediaFrameListener *) 0 ;
  
  arg1 = *(MediaStreamDuplicaterFacade **)&_swig_go_0; 
  arg2 = *(MediaFrameListener **)&_swig_go_1; 
  
  (arg1)->AddMediaListener(arg2);
  
}


void _wrap_MediaStreamDuplicaterFacade_RemoveMediaListener_mediaserver_3513984b9ef493bf(MediaStreamDuplicaterFacade *_swig_go_0, MediaFrameListener *_swig_go_1) {
  MediaStreamDuplicaterFacade *arg1 = (MediaStreamDuplicaterFacade *) 0 ;
  MediaFrameListener *arg2 = (MediaFrameListener *) 0 ;
  
  arg1 = *(MediaStreamDuplicaterFacade **)&_swig_go_0; 
  arg2 = *(MediaFrameListener **)&_swig_go_1; 
  
  (arg1)->RemoveMediaListener(arg2);
  
}


void _wrap_MediaStreamDuplicaterFacade_Stop_mediaserver_3513984b9ef493bf(MediaStreamDuplicaterFacade *_swig_go_0) {
  MediaStreamDuplicaterFacade *arg1 = (MediaStreamDuplicaterFacade *) 0 ;
  
  arg1 = *(MediaStreamDuplicaterFacade **)&_swig_go_0; 
  
  (arg1)->Stop();
  
}


void _wrap_delete_MediaStreamDuplicaterFacade_mediaserver_3513984b9ef493bf(MediaStreamDuplicaterFacade *_swig_go_0) {
  MediaStreamDuplicaterFacade *arg1 = (MediaStreamDuplicaterFacade *) 0 ;
  
  arg1 = *(MediaStreamDuplicaterFacade **)&_swig_go_0; 
  
  delete arg1;
  
}


PlayerEndListener *_wrap__swig_NewDirectorPlayerEndListenerPlayerEndListener_mediaserver_3513984b9ef493bf(intgo _swig_go_0) {
  int arg1 ;
  PlayerEndListener *result = 0 ;
  PlayerEndListener *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = new SwigDirector_PlayerEndListener(arg1);
  *(PlayerEndListener **)&_swig_go_result = (PlayerEndListener *)result; 
  return _swig_go_result;
}


void _wrap_DeleteDirectorPlayerEndListener_mediaserver_3513984b9ef493bf(PlayerEndListener *_swig_go_0) {
  PlayerEndListener *arg1 = (PlayerEndListener *) 0 ;
  
  arg1 = *(PlayerEndListener **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap__swig_DirectorPlayerEndListener_upcall_OnEnd_mediaserver_3513984b9ef493bf(SwigDirector_PlayerEndListener *_swig_go_0) {
  SwigDirector_PlayerEndListener *arg1 = (SwigDirector_PlayerEndListener *) 0 ;
  
  arg1 = *(SwigDirector_PlayerEndListener **)&_swig_go_0; 
  
  arg1->_swig_upcall_onEnd();
  
}


PlayerEndListener *_wrap_new_PlayerEndListener_mediaserver_3513984b9ef493bf() {
  PlayerEndListener *result = 0 ;
  PlayerEndListener *_swig_go_result;
  
  
  result = (PlayerEndListener *)new PlayerEndListener();
  *(PlayerEndListener **)&_swig_go_result = (PlayerEndListener *)result; 
  return _swig_go_result;
}


void _wrap_delete_PlayerEndListener_mediaserver_3513984b9ef493bf(PlayerEndListener *_swig_go_0) {
  PlayerEndListener *arg1 = (PlayerEndListener *) 0 ;
  
  arg1 = *(PlayerEndListener **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_PlayerEndListener_onEnd_mediaserver_3513984b9ef493bf(PlayerEndListener *_swig_go_0) {
  PlayerEndListener *arg1 = (PlayerEndListener *) 0 ;
  
  arg1 = *(PlayerEndListener **)&_swig_go_0; 
  
  (arg1)->onEnd();
  
}


REMBBitrateListener *_wrap__swig_NewDirectorREMBBitrateListenerREMBBitrateListener_mediaserver_3513984b9ef493bf(intgo _swig_go_0) {
  int arg1 ;
  REMBBitrateListener *result = 0 ;
  REMBBitrateListener *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = new SwigDirector_REMBBitrateListener(arg1);
  *(REMBBitrateListener **)&_swig_go_result = (REMBBitrateListener *)result; 
  return _swig_go_result;
}


void _wrap_DeleteDirectorREMBBitrateListener_mediaserver_3513984b9ef493bf(REMBBitrateListener *_swig_go_0) {
  REMBBitrateListener *arg1 = (REMBBitrateListener *) 0 ;
  
  arg1 = *(REMBBitrateListener **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap__swig_DirectorREMBBitrateListener_upcall_OnREMB_mediaserver_3513984b9ef493bf(SwigDirector_REMBBitrateListener *_swig_go_0) {
  SwigDirector_REMBBitrateListener *arg1 = (SwigDirector_REMBBitrateListener *) 0 ;
  
  arg1 = *(SwigDirector_REMBBitrateListener **)&_swig_go_0; 
  
  arg1->_swig_upcall_onREMB();
  
}


REMBBitrateListener *_wrap_new_REMBBitrateListener_mediaserver_3513984b9ef493bf() {
  REMBBitrateListener *result = 0 ;
  REMBBitrateListener *_swig_go_result;
  
  
  result = (REMBBitrateListener *)new REMBBitrateListener();
  *(REMBBitrateListener **)&_swig_go_result = (REMBBitrateListener *)result; 
  return _swig_go_result;
}


void _wrap_delete_REMBBitrateListener_mediaserver_3513984b9ef493bf(REMBBitrateListener *_swig_go_0) {
  REMBBitrateListener *arg1 = (REMBBitrateListener *) 0 ;
  
  arg1 = *(REMBBitrateListener **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_REMBBitrateListener_onREMB_mediaserver_3513984b9ef493bf(REMBBitrateListener *_swig_go_0) {
  REMBBitrateListener *arg1 = (REMBBitrateListener *) 0 ;
  
  arg1 = *(REMBBitrateListener **)&_swig_go_0; 
  
  (arg1)->onREMB();
  
}


#ifdef __cplusplus
}
#endif

